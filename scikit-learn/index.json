{"tags": {"0.10-branching": 9504, "0.15.2": 27814, "0.5": 1999, "debian/0.3-3": 813, "0.16b1": 30240, "0.15.1": 27239, "0.7.1": 3437, "0.17-branching": 32936, "debian/0.4-3": 1312, "0.8.1": 5382, "0.18rc1": 37460, "0.19b2": 46470, "0.12-branching": 13272, "0.21rc1": 68802, "debian/0.12.0-1": 13322, "0.1": 395, "0.15.0b1": 25903, "0.6-rc": 2793, "0.19b1": 46308, "0.13-branching": 16719, "debian/0.5-1": 2007, "0.17.1": 34875, "0.12.1": 13955, "debian/0.17.0-3": 34283, "0.13.1": 17308, "0.11-beta": 11456, "0.8": 4390, "0.5.rc2": 1947, "0.19.1": 49233, "0.18.2": 45505, "debian/0.6.0.dfsg-1": 2862, "debian/0.7.1.dfsg-1": 3516, "0.16.1": 30837, "debian/0.8.1.dfsg-1": 5395, "debian/0.8.0.dfsg-1": 4407, "0.17b1": 32943, "0.20.2": 63124, "debian/0.17.0-4": 34284, "0.21.1": 69591, "debian/0.4-2": 1150, "0.15.0": 26580, "0.6.0": 2815, "0.20.3": 66327, "0.18rc": 37455, "0.12": 13295, "0.1-beta": 382, "debian/0.3-4": 826, "0.5.rc3": 1949, "0.19-branching": 46304, "0.5.rc": 1945, "0.4": 998, "debian/0.2+svn625-1": 646, "debian/0.11.0-1": 11524, "debian/0.17.0_b1-1": 33542, "0.20rc1": 59489, "debian/0.7.1.dfsg-3": 3997, "0.8-branching": 4212, "debian/0.4-1": 1016, "debian/0.16.1-2": 31647, "0.14.1": 21619, "0.11-branching": 11502, "0.16-branching": 30238, "0.15-branching": 26216, "0.14": 21587, "0.9-branching": 7155, "0.3": 745, "0.17": 33780, "0.7-branching": 3299, "0.14a1": 21347, "0.13": 16726, "0.2-beta": 587, "0.21.2": 69887, "0.18.1": 39279, "0.10": 9536, "0.2": 590, "0.21.0": 69451, "0.7": 3354, "0.18": 37857, "debian/0.10.0-1": 9555, "sprint01": 1231, "0.11": 11511, "0.20.1": 62447, "0.18rc2": 37504, "0.20.0": 60214, "0.21b2": 68841, "0.15.0b2": 26217, "debian/0.17.0-1": 33800, "0.19.0": 47201, "debian/0.3-2": 811, "0.19.2": 57643, "0.9": 7213, "debian/0.9.0.dfsg-1": 7568, "0.21rc2": 68842, "0.16.0": 30567, "debian/0.3-1": 755, "debian/0.17.0_b1+git14-g4e6829c-1": 33545, "0.17.1-1": 34876, "debian/0.11.0-2": 12180}, "revision_to_date": {"57643": 1531668719000, "11524": 1336524866000, "5382": 1309505367000, "70408": 1559729163000, "33545": 1445958667000, "13322": 1346981442000, "2007": 1286812002000, "9555": 1326426441000, "813": 1273337313000, "5395": 1309545528000, "66327": 1551431215000, "3354": 1299078131000, "32943": 1445013082000, "70336": 1559549758000, "30238": 1425667359000, "1312": 1281104090000, "46470": 1500281648000, "4390": 1305108339000, "811": 1273294444000, "7213": 1316642399000, "2862": 1294669325000, "25903": 1401972588000, "70448": 1559887770000, "33800": 1446818031000, "70450": 1559912152000, "60214": 1537887812000, "4407": 1305126138000, "826": 1273550555000, "34875": 1455802186000, "34876": 1455802246000, "70463": 1559995106000, "70464": 1560011866000, "59489": 1535551327000, "69451": 1557442357000, "590": 1269244318000, "37455": 1473791605000, "49233": 1505921382000, "16719": 1358801181000, "21587": 1375915741000, "37460": 1473799038000, "16726": 1358806382000, "70489": 1560181437000, "47201": 1502470027000, "21347": 1375060310000, "70501": 1560248483000, "70502": 1560248632000, "30567": 1427396256000, "26216": 1404172403000, "26217": 1404240383000, "27239": 1406899808000, "70509": 1560258463000, "39279": 1478902517000, "30240": 1425681522000, "21619": 1375972053000, "4212": 1304345121000, "30837": 1429027572000, "745": 1272878771000, "12180": 1341415689000, "382": 1264603663000, "37504": 1473882154000, "9536": 1326287141000, "13955": 1349734773000, "646": 1270698297000, "395": 1265024295000, "3437": 1299680572000, "7568": 1318977607000, "63124": 1545209521000, "755": 1272909852000, "1945": 1286358759000, "1947": 1286371631000, "17308": 1361636276000, "3997": 1302729559000, "31647": 1436588422000, "27814": 1409835738000, "13295": 1346788092000, "32936": 1445007457000, "1949": 1286373337000, "70515": 1560260773000, "9504": 1326216418000, "68841": 1556634531000, "3516": 1300670714000, "70335": 1559548461000, "11456": 1336328405000, "45505": 1497903977000, "68802": 1556603560000, "587": 1269007740000, "1231": 1280235748000, "33542": 1445953225000, "26580": 1405354512000, "69591": 1557893876000, "13272": 1346780365000, "1999": 1286782666000, "70364": 1559654119000, "70367": 1559661926000, "46304": 1499947923000, "37857": 1475007587000, "3299": 1298808434000, "46308": 1499952302000, "998": 1277561666000, "2793": 1292596297000, "68842": 1556635319000, "34283": 1450749753000, "34284": 1450761225000, "11502": 1336407543000, "62447": 1542875805000, "7155": 1316527045000, "33780": 1446753465000, "1150": 1279558872000, "11511": 1336426836000, "1016": 1277824675000, "69887": 1558616196000, "2815": 1292968871000}, "benchmarks": {"decomposition.MiniBatchDictionaryLearning_bench.track_train_score": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.MiniBatchDictionaryLearning_bench.track_train_score", "unit": "unit", "version": "e37807815d3a257010a314054a5f2940972206cdd037214e99987193dc640269", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500}, "svm.Estimator.track_test_score": {"param_names": [], "name": "svm.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "common.Estimator.track_train_score": {"param_names": [], "name": "common.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "cluster.KMeans_bench.track_test_score": {"param_names": ["representation", "algorithm", "n_jobs"], "name": "cluster.KMeans_bench.track_test_score", "unit": "unit", "version": "cce3aefbb2d307d526ad5a914ef6df10122a5f5900f2661d50084eb44edab97e", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500}, "decomposition.PCA_bench.peakmem_fit": {"param_names": ["svd_solver"], "name": "decomposition.PCA_bench.peakmem_fit", "unit": "bytes", "version": "fc91a31aa09e089cae7a08960bcbdc9d4c927b2fc1d7960d435c07bec70a77f9", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'full'", "'arpack'", "'randomized'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500}, "decomposition.Transformer.peakmem_transform": {"param_names": [], "name": "decomposition.Transformer.peakmem_transform", "unit": "bytes", "version": "55dbd993e965490c620531536fb2591b83c21b74a200fd0571e39565883beb13", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "decomposition.MiniBatchDictionaryLearning_bench.time_fit": {"param_names": ["fit_algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500, "repeat": 1, "name": "decomposition.MiniBatchDictionaryLearning_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "6ea4d753870dc3051bba52fbecb4634e5e8d1c505b6cd0f7e16f923f7d84a4be", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'lars'", "'cd'"], ["1"]], "number": 1}, "model_selection.CrossValidation_bench.track_crossval": {"param_names": ["n_jobs"], "name": "model_selection.CrossValidation_bench.track_crossval", "unit": "unit", "version": "ef56f5c9a7b8860682ac60aefd5f653089fd7aca28a8bf6014df904290ebeb9a", "code": "class CrossValidation_bench:\n    def track_crossval(self, *args):\n        return float(cross_val_score(self.clf, self.X,\n                                     self.y, **self.cv_params).mean())\n\n    def setup(self, *params):\n        n_jobs, = params\n    \n        data = _synth_classification_dataset(n_samples=50000, n_features=100)\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.clf = RandomForestClassifier(n_estimators=50,\n                                          max_depth=10,\n                                          random_state=0)\n    \n        cv = 16 if Benchmark.data_size == 'large' else 4\n    \n        self.cv_params = {'n_jobs': n_jobs,\n                          'cv': cv}", "params": [["1"]], "timeout": 20000, "type": "track"}, "cluster.KMeans_bench.time_predict": {"param_names": ["representation", "algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500, "repeat": 1, "name": "cluster.KMeans_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "3bffd4158bbe75dff464a8ef88ca881deb96ccd4018477c0333bd504d03d78b2", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "number": 1}, "linear_model.SGDRegressor_bench.time_predict": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500, "repeat": 1, "name": "linear_model.SGDRegressor_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "1d74f9ad5ea7a6c3721cf57abb809f4b054aaf7680055d4e7e413d994a6a3008", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "neighbors.KNeighborsClassifier_bench.time_predict": {"param_names": ["algorithm", "dimension", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500, "repeat": 1, "name": "neighbors.KNeighborsClassifier_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "c8266a33bb8fe5f32cadeb6d1fce97997d28aaaab0c4839a8a3596e90be10229", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "number": 1}, "ensemble.GradientBoostingClassifier_bench.peakmem_predict": {"param_names": ["representation"], "name": "ensemble.GradientBoostingClassifier_bench.peakmem_predict", "unit": "bytes", "version": "62e9e4b27e4ee5493a159de5c5c5b1de31aec8ac9f10ae04103818117689d5e1", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500}, "linear_model.Ridge_bench.peakmem_fit": {"param_names": ["representation", "solver"], "name": "linear_model.Ridge_bench.peakmem_fit", "unit": "bytes", "version": "2a2e69585c5d33aa59e117c6ca7de433d10220d329c8f3d5c07b1a541c7ffa40", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500}, "linear_model.Lasso_bench.peakmem_fit": {"param_names": ["representation", "precompute"], "name": "linear_model.Lasso_bench.peakmem_fit", "unit": "bytes", "version": "daa647adb2a48779185e361e563bcd83d0781fa7c0b94bfab0454ae9a8730a63", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500}, "decomposition.PCA_bench.track_train_score": {"param_names": ["svd_solver"], "name": "decomposition.PCA_bench.track_train_score", "unit": "unit", "version": "fce5caf140c445524a8cd6539ecefc595058adec4ff12ba1ffbd0118031d9623", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'full'", "'arpack'", "'randomized'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500}, "ensemble.GradientBoostingClassifier_bench.track_train_score": {"param_names": ["representation"], "name": "ensemble.GradientBoostingClassifier_bench.track_train_score", "unit": "unit", "version": "8eab988fafaa43b58b6722164cd106a8d2cd67054b67fb8b4cea581b94c30414", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500}, "decomposition.MiniBatchDictionaryLearning_bench.track_test_score": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.MiniBatchDictionaryLearning_bench.track_test_score", "unit": "unit", "version": "92b901a98f9f7caf5e7e06e36394d499b56b5332ec59a301da004f0fa8a56b33", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500}, "model_selection.Estimator.track_train_score": {"param_names": [], "name": "model_selection.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "decomposition.PCA_bench.time_transform": {"param_names": ["svd_solver"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500, "repeat": 1, "name": "decomposition.PCA_bench.time_transform", "processes": 1, "sample_time": 0.01, "version": "a0028e7a7a0ee7b618954885a999919ba53c0f9ac1c3342d3bbe0d714f0738b9", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'full'", "'arpack'", "'randomized'"]], "number": 1}, "linear_model.LogisticRegression_bench.peakmem_predict": {"param_names": ["representation", "solver", "n_jobs"], "name": "linear_model.LogisticRegression_bench.peakmem_predict", "unit": "bytes", "version": "732fea3e0a920a6feeea558c4566e2b7be00a4ee8c471f23a310f7a5a16115e9", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500}, "svm.SVC_bench.time_predict": {"param_names": ["kernel"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500, "repeat": 1, "name": "svm.SVC_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "a1eeacd93ca12e112dabb410ef6c90bc5ae75d72a25b27f4ab2ce57286ef05fe", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "number": 1}, "manifold.TSNE_bench.peakmem_fit": {"param_names": ["method"], "name": "manifold.TSNE_bench.peakmem_fit", "unit": "bytes", "version": "e81278bfd9fb24039df53cc280a13a1985f40cd7106ce7667d2721604d1ed986", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass TSNE_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'exact'", "'barnes_hut'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/manifold.py:15", "timeout": 500}, "model_selection.CrossValidation_bench.time_crossval": {"param_names": ["n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "timeout": 20000, "type": "time", "repeat": 1, "name": "model_selection.CrossValidation_bench.time_crossval", "processes": 1, "sample_time": 0.01, "version": "0e86e88697c90fb06c5e25e8d8bf80235543d14c8c7ec21b844b5aa10b2f735e", "code": "class CrossValidation_bench:\n    def time_crossval(self, *args):\n        cross_val_score(self.clf, self.X, self.y, **self.cv_params)\n\n    def setup(self, *params):\n        n_jobs, = params\n    \n        data = _synth_classification_dataset(n_samples=50000, n_features=100)\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.clf = RandomForestClassifier(n_estimators=50,\n                                          max_depth=10,\n                                          random_state=0)\n    \n        cv = 16 if Benchmark.data_size == 'large' else 4\n    \n        self.cv_params = {'n_jobs': n_jobs,\n                          'cv': cv}", "params": [["1"]], "number": 1}, "linear_model.ElasticNet_bench.time_fit": {"param_names": ["representation", "precompute"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500, "repeat": 1, "name": "linear_model.ElasticNet_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "71ce50de0dd40c75a22028c005e9f50898a436238a8806fd538fe7ac607cc8ff", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["True", "False"]], "number": 1}, "decomposition.DictionaryLearning_bench.peakmem_transform": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.DictionaryLearning_bench.peakmem_transform", "unit": "bytes", "version": "64d8cb14514aac9f2e7acdd46c588b04817028fb3085ad456e4831395f540145", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500}, "ensemble.Predictor.peakmem_predict": {"param_names": [], "name": "ensemble.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "linear_model.LogisticRegression_bench.time_fit": {"param_names": ["representation", "solver", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500, "repeat": 1, "name": "linear_model.LogisticRegression_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "0f4273593816c2ab06de7ba8974c970a9e336a8005cef2143972f0ef9c7534c9", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "number": 1}, "common.Estimator.peakmem_fit": {"param_names": [], "name": "common.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "manifold.Estimator.track_train_score": {"param_names": [], "name": "manifold.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "model_selection.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "model_selection.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "linear_model.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "linear_model.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "linear_model.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "linear_model.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "common.Transformer.time_transform": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "common.Transformer.time_transform", "processes": 2, "sample_time": 0.01, "version": "84bed356d91274ed99ec044e4575b05968beeaa3ad5750f0ffdfd680d0cc7424", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "number": 0}, "cluster.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "cluster.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "neighbors.Estimator.track_test_score": {"param_names": [], "name": "neighbors.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "common.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "common.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "ensemble.RandomForestClassifier_bench.peakmem_fit": {"param_names": ["representation", "n_jobs"], "name": "ensemble.RandomForestClassifier_bench.peakmem_fit", "unit": "bytes", "version": "3f5a451481659ccc450387d560a4a8dd820e5ffeeb9ce549dca31e088cb46472", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500}, "cluster.Estimator.track_train_score": {"param_names": [], "name": "cluster.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "model_selection.Estimator.peakmem_fit": {"param_names": [], "name": "model_selection.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "svm.SVC_bench.track_train_score": {"param_names": ["kernel"], "name": "svm.SVC_bench.track_train_score", "unit": "unit", "version": "35021b53686fc3b22b19f95b212fd236de29fe802a9b2c8ec4435420627b1ae8", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500}, "linear_model.Lasso_bench.track_test_score": {"param_names": ["representation", "precompute"], "name": "linear_model.Lasso_bench.track_test_score", "unit": "unit", "version": "3ced0e89ac3f7457a5bb8a1c9edae0014c18ebe118c9d45854cdff4190fd1c34", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500}, "neighbors.KNeighborsClassifier_bench.track_test_score": {"param_names": ["algorithm", "dimension", "n_jobs"], "name": "neighbors.KNeighborsClassifier_bench.track_test_score", "unit": "unit", "version": "92ebed5fceb2d11b0d4eb484888e0643fef9b84cf56d2c31da0f4e0585dd4e0a", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500}, "svm.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "svm.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "cluster.Estimator.peakmem_fit": {"param_names": [], "name": "cluster.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "manifold.TSNE_bench.track_test_score": {"param_names": ["method"], "name": "manifold.TSNE_bench.track_test_score", "unit": "unit", "version": "bc7c384d8f7711dd6f9baf1a9b74fa5d171852e3c7bb9d180061de7b32cd71c5", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass TSNE_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'exact'", "'barnes_hut'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/manifold.py:15", "timeout": 500}, "linear_model.SGDRegressor_bench.time_fit": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500, "repeat": 1, "name": "linear_model.SGDRegressor_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "26e37049c00d0f4eea50a03ceb7f47598f8042c56466f415d7ca1b578380c943", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "model_selection.GridSearch_bench.time_predict": {"param_names": ["n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000, "repeat": 1, "name": "model_selection.GridSearch_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "6a51fb3b77bf526a53da418e70ae041aecef84731b8a9aa93a27e7e8b6328c33", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["1"]], "number": 1}, "linear_model.SGDRegressor_bench.peakmem_fit": {"param_names": ["representation"], "name": "linear_model.SGDRegressor_bench.peakmem_fit", "unit": "bytes", "version": "dd1d47ba074fa8651d5ceb182a46d12fb26157a4cce9e1a6296507a69a56fa4b", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500}, "model_selection.Estimator.track_test_score": {"param_names": [], "name": "model_selection.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.Estimator.peakmem_fit": {"param_names": [], "name": "linear_model.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "metrics.PairwiseDistances_bench.time_pairwise_distances": {"param_names": ["representation", "metric", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "timeout": 500, "type": "time", "repeat": 1, "name": "metrics.PairwiseDistances_bench.time_pairwise_distances", "processes": 1, "sample_time": 0.01, "version": "ad61e26fdd476aae79ee28c28173dd884e4c46b5433df92fa1e981b9511cb584", "code": "class PairwiseDistances_bench:\n    def time_pairwise_distances(self, *args):\n        pairwise_distances(self.X, **self.pdist_params)\n\n    def setup(self, *params):\n        representation, metric, n_jobs = params\n    \n        if representation == 'sparse' and metric == 'correlation':\n            raise NotImplementedError\n    \n        if Benchmark.data_size == 'large':\n            if metric in ('manhattan', 'correlation'):\n                n_samples = 8000\n            else:\n                n_samples = 24000\n        else:\n            if metric in ('manhattan', 'correlation'):\n                n_samples = 4000\n            else:\n                n_samples = 12000\n    \n        data = _random_dataset(n_samples=n_samples,\n                               representation=representation)\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.pdist_params = {'metric': metric,\n                             'n_jobs': n_jobs}", "params": [["'dense'", "'sparse'"], ["'cosine'", "'euclidean'", "'manhattan'", "'correlation'"], ["1"]], "number": 1}, "decomposition.PCA_bench.peakmem_transform": {"param_names": ["svd_solver"], "name": "decomposition.PCA_bench.peakmem_transform", "unit": "bytes", "version": "1389b838d004f475267292c2a7efcddf4256917c61667a1fbc414f2502a7a8cb", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'full'", "'arpack'", "'randomized'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500}, "ensemble.RandomForestClassifier_bench.peakmem_predict": {"param_names": ["representation", "n_jobs"], "name": "ensemble.RandomForestClassifier_bench.peakmem_predict", "unit": "bytes", "version": "956f9c8457ec38bfe1882c00c762740faeb1b26b4dde218bcfb9447bcb7edd7d", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500}, "linear_model.SGDRegressor_bench.track_test_score": {"param_names": ["representation"], "name": "linear_model.SGDRegressor_bench.track_test_score", "unit": "unit", "version": "08b7b5540a0f4e6170046da721c19278b790fdab2c1ea957454fa39adb4eb9dd", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500}, "decomposition.Estimator.peakmem_fit": {"param_names": [], "name": "decomposition.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "model_selection.GridSearch_bench.track_train_score": {"param_names": ["n_jobs"], "name": "model_selection.GridSearch_bench.track_train_score", "unit": "unit", "version": "b6970e48491caf75af8d8082c6692200b2ab23e866fcb5c9af4cbfc8b74a0270", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000}, "decomposition.MiniBatchDictionaryLearning_bench.peakmem_fit": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.MiniBatchDictionaryLearning_bench.peakmem_fit", "unit": "bytes", "version": "fa7ee9df232bb8ee8559cde38629bbd3d70153c2dbabe86db82f56dbb97113e3", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500}, "linear_model.SGDRegressor_bench.peakmem_predict": {"param_names": ["representation"], "name": "linear_model.SGDRegressor_bench.peakmem_predict", "unit": "bytes", "version": "125be4e69aa3a345daf9bbc48b6bd2033b188ea5b3f285d138249250d4039255", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500}, "linear_model.Lasso_bench.time_predict": {"param_names": ["representation", "precompute"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500, "repeat": 1, "name": "linear_model.Lasso_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "d0a212a0aa57c27c1fc28395fe2b858956b7d8417963402eac71341704645a12", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["True", "False"]], "number": 1}, "cluster.Estimator.track_test_score": {"param_names": [], "name": "cluster.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.Estimator.track_train_score": {"param_names": [], "name": "linear_model.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "model_selection.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "model_selection.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "svm.Estimator.track_train_score": {"param_names": [], "name": "svm.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "metrics.PairwiseDistances_bench.peakmem_pairwise_distances": {"param_names": ["representation", "metric", "n_jobs"], "name": "metrics.PairwiseDistances_bench.peakmem_pairwise_distances", "unit": "bytes", "version": "51f505ec5a06cea80452c3a30dd849e9221ee0ae3d3a18dfb68cb653636c6974", "code": "class PairwiseDistances_bench:\n    def peakmem_pairwise_distances(self, *args):\n        pairwise_distances(self.X, **self.pdist_params)\n\n    def setup(self, *params):\n        representation, metric, n_jobs = params\n    \n        if representation == 'sparse' and metric == 'correlation':\n            raise NotImplementedError\n    \n        if Benchmark.data_size == 'large':\n            if metric in ('manhattan', 'correlation'):\n                n_samples = 8000\n            else:\n                n_samples = 24000\n        else:\n            if metric in ('manhattan', 'correlation'):\n                n_samples = 4000\n            else:\n                n_samples = 12000\n    \n        data = _random_dataset(n_samples=n_samples,\n                               representation=representation)\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.pdist_params = {'metric': metric,\n                             'n_jobs': n_jobs}", "params": [["'dense'", "'sparse'"], ["'cosine'", "'euclidean'", "'manhattan'", "'correlation'"], ["1"]], "timeout": 500, "type": "peakmemory"}, "linear_model.ElasticNet_bench.time_predict": {"param_names": ["representation", "precompute"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500, "repeat": 1, "name": "linear_model.ElasticNet_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "d11251388a0ee503846b3f2cf0b58ec58f48ba7f8995c33097a1cc4ebfbb24bc", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["True", "False"]], "number": 1}, "neighbors.KNeighborsClassifier_bench.peakmem_fit": {"param_names": ["algorithm", "dimension", "n_jobs"], "name": "neighbors.KNeighborsClassifier_bench.peakmem_fit", "unit": "bytes", "version": "51139a437ec2402b8718e76c5bdc42b5fd1f262d0a7fea5dccd92fe4e167c096", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500}, "neighbors.KNeighborsClassifier_bench.time_fit": {"param_names": ["algorithm", "dimension", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500, "repeat": 1, "name": "neighbors.KNeighborsClassifier_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "9ae794a5f9f0f7ae9e3d18ddfa07b1ae0f339e3c55e73818ecc0b9af266265c7", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "number": 1}, "linear_model.Ridge_bench.track_test_score": {"param_names": ["representation", "solver"], "name": "linear_model.Ridge_bench.track_test_score", "unit": "unit", "version": "ad06fcf4a5bdfe16af7122a8241c01a26c0ba1bf266633098973c3a62efcd03f", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500}, "cluster.KMeans_bench.peakmem_fit": {"param_names": ["representation", "algorithm", "n_jobs"], "name": "cluster.KMeans_bench.peakmem_fit", "unit": "bytes", "version": "a15b73a00bc0a46f18c16fcb22abd009d639a4ae49f8a0b0b969fcf0d483e78a", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500}, "manifold.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "manifold.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "cluster.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "cluster.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "manifold.TSNE_bench.track_train_score": {"param_names": ["method"], "name": "manifold.TSNE_bench.track_train_score", "unit": "unit", "version": "c3500d3165193ac8d0b9e78427d159b04ae2f4cf00a929483c3137ae4da22699", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass TSNE_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'exact'", "'barnes_hut'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/manifold.py:15", "timeout": 500}, "ensemble.RandomForestClassifier_bench.time_fit": {"param_names": ["representation", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500, "repeat": 1, "name": "ensemble.RandomForestClassifier_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "ad4776d526bdeb5fc5aff6c40410d76f2adbca51fd1eb36d395cf3f5ff206997", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["1"]], "number": 1}, "cluster.KMeansPlusPlus_bench.peakmem_kmeansplusplus": {"param_names": ["representation"], "name": "cluster.KMeansPlusPlus_bench.peakmem_kmeansplusplus", "unit": "bytes", "version": "2285fe7104ecb49c861feb5b225753f84ff6fca5ade47688d2f0f8ff03e7a4d2", "code": "class KMeansPlusPlus_bench:\n    def peakmem_kmeansplusplus(self, *args):\n        _k_init(self.X, self.n_clusters, self.x_squared_norms,\n                random_state=np.random.RandomState(0))\n\n    def setup(self, *params):\n        representation, = params\n    \n        if representation == 'sparse':\n            data = _20newsgroups_highdim_dataset(ngrams=(1, 2))\n            self.n_clusters = 20\n        else:\n            data = _china_dataset()\n            self.n_clusters = 256\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.x_squared_norms = row_norms(self.X, squared=True)", "params": [["'dense'", "'sparse'"]], "timeout": 500, "type": "peakmemory"}, "common.Predictor.peakmem_predict": {"param_names": [], "name": "common.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "ensemble.Estimator.track_train_score": {"param_names": [], "name": "ensemble.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.LinearRegression_bench.time_fit": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500, "repeat": 1, "name": "linear_model.LinearRegression_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "2192d5a96a07a943147b7e2bbe6dead656b092f68c67ab97aef1c22a212c16d7", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "decomposition.DictionaryLearning_bench.peakmem_fit": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.DictionaryLearning_bench.peakmem_fit", "unit": "bytes", "version": "8bcf77528662814e9ad96e54da38e12336f28922f5caa99f4e2175044c4c686e", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500}, "ensemble.Estimator.track_test_score": {"param_names": [], "name": "ensemble.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.LinearRegression_bench.track_train_score": {"param_names": ["representation"], "name": "linear_model.LinearRegression_bench.track_train_score", "unit": "unit", "version": "3a8acdfe4f93b6cb59f07e9f26975802eb7eb946aebc4fbbdfe68f74d5d5528f", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500}, "neighbors.Estimator.track_train_score": {"param_names": [], "name": "neighbors.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "svm.SVC_bench.time_fit": {"param_names": ["kernel"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500, "repeat": 1, "name": "svm.SVC_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "76f2f9222dffc36944644ef00c947d6c858d36145f7e05eac3f99651eca49c15", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "number": 1}, "ensemble.RandomForestClassifier_bench.track_train_score": {"param_names": ["representation", "n_jobs"], "name": "ensemble.RandomForestClassifier_bench.track_train_score", "unit": "unit", "version": "e5b0441fdb9c22398c9a0313afe1bc5175ccf6418440ee577295698b595c50a5", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500}, "neighbors.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "neighbors.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "cluster.KMeans_bench.time_fit": {"param_names": ["representation", "algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500, "repeat": 1, "name": "cluster.KMeans_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "6a6866e7ca85e0597b0dbe009ef678e0c6ab9a38c5a067ade6e1d9c5e7b1e21a", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "number": 1}, "decomposition.Estimator.track_train_score": {"param_names": [], "name": "decomposition.Estimator.track_train_score", "unit": "unit", "version": "e97fc67f785aa58cc6d2ca866c9cef39dd33e6ab29bb30a9b4831d80a2de42ac", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.SGDRegressor_bench.track_train_score": {"param_names": ["representation"], "name": "linear_model.SGDRegressor_bench.track_train_score", "unit": "unit", "version": "ce3a1f864bd4aa5de915f18898082649bd3ff1da80979fb2c0f92bcbfa31d204", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SGDRegressor_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:130", "timeout": 500}, "svm.SVC_bench.track_test_score": {"param_names": ["kernel"], "name": "svm.SVC_bench.track_test_score", "unit": "unit", "version": "6d7e81e22153dc4c5083bb02d63aebd04d275497c98a51e93ee3ce5b94888c31", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500}, "cluster.Predictor.peakmem_predict": {"param_names": [], "name": "cluster.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "common.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "common.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "linear_model.LinearRegression_bench.time_predict": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500, "repeat": 1, "name": "linear_model.LinearRegression_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "24535f48cf2d2f29021e8164bce67671ee384ef7f91c0b7f2186b4968bb486a8", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "linear_model.Ridge_bench.time_predict": {"param_names": ["representation", "solver"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500, "repeat": 1, "name": "linear_model.Ridge_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "80f31ce3d89d24c195ea184990c07c492d14ed3d57fd5405b7f0ed699227f470", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "number": 1}, "linear_model.LogisticRegression_bench.peakmem_fit": {"param_names": ["representation", "solver", "n_jobs"], "name": "linear_model.LogisticRegression_bench.peakmem_fit", "unit": "bytes", "version": "afc7f1f71c268ef00b8538f93ab2334f9e7039ef9d536028fbfd17d0b00a64be", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500}, "cluster.KMeansPlusPlus_bench.time_kmeansplusplus": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "timeout": 500, "type": "time", "repeat": 1, "name": "cluster.KMeansPlusPlus_bench.time_kmeansplusplus", "processes": 1, "sample_time": 0.01, "version": "1f60d4fad0664cc497f4b326d3f0327bb72263ff2942bb2399aefb2b301ad655", "code": "class KMeansPlusPlus_bench:\n    def time_kmeansplusplus(self, *args):\n        _k_init(self.X, self.n_clusters, self.x_squared_norms,\n                random_state=np.random.RandomState(0))\n\n    def setup(self, *params):\n        representation, = params\n    \n        if representation == 'sparse':\n            data = _20newsgroups_highdim_dataset(ngrams=(1, 2))\n            self.n_clusters = 20\n        else:\n            data = _china_dataset()\n            self.n_clusters = 256\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.x_squared_norms = row_norms(self.X, squared=True)", "params": [["'dense'", "'sparse'"]], "number": 1}, "linear_model.ElasticNet_bench.track_train_score": {"param_names": ["representation", "precompute"], "name": "linear_model.ElasticNet_bench.track_train_score", "unit": "unit", "version": "e947f57a8b8b5a3dab7a1ca82e2145a09ec5768454bb09e2ea278caae1ce8ffa", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500}, "common.Estimator.track_test_score": {"param_names": [], "name": "common.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "neighbors.KNeighborsClassifier_bench.track_train_score": {"param_names": ["algorithm", "dimension", "n_jobs"], "name": "neighbors.KNeighborsClassifier_bench.track_train_score", "unit": "unit", "version": "d321a6fdc39758954b181be3ac3a8b6669b5402b07b7ca22579de2e041b5ee43", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500}, "svm.Estimator.peakmem_fit": {"param_names": [], "name": "svm.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "manifold.TSNE_bench.time_fit": {"param_names": ["method"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/manifold.py:15", "timeout": 500, "repeat": 1, "name": "manifold.TSNE_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "d0126ec767b1683f3685c5bd6e7d6b60ddd3f486aee5e402281b06471738f983", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass TSNE_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'exact'", "'barnes_hut'"]], "number": 1}, "model_selection.GridSearch_bench.time_fit": {"param_names": ["n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000, "repeat": 1, "name": "model_selection.GridSearch_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "77593082de3d507523512befc7c15b5d62859d7926fef1b3d01b06f648fc2bea", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["1"]], "number": 1}, "manifold.Estimator.peakmem_fit": {"param_names": [], "name": "manifold.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.LinearRegression_bench.peakmem_fit": {"param_names": ["representation"], "name": "linear_model.LinearRegression_bench.peakmem_fit", "unit": "bytes", "version": "1684a1e1d3f78b1fe940ca1e3274f7dbd273971f263dc1cde9b47c8638c1a8bf", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500}, "svm.Predictor.peakmem_predict": {"param_names": [], "name": "svm.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "linear_model.LogisticRegression_bench.track_train_score": {"param_names": ["representation", "solver", "n_jobs"], "name": "linear_model.LogisticRegression_bench.track_train_score", "unit": "unit", "version": "269b7dbc0ba2f43699f1078891bfd34a4864f4aaf565e54ad685665d2c03cdfc", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500}, "model_selection.GridSearch_bench.peakmem_predict": {"param_names": ["n_jobs"], "name": "model_selection.GridSearch_bench.peakmem_predict", "unit": "bytes", "version": "e915405e8dc9c1e7de733174eb87eecd311423fdc1045b0d62d078694a221221", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000}, "decomposition.Estimator.track_test_score": {"param_names": [], "name": "decomposition.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "linear_model.LogisticRegression_bench.track_test_score": {"param_names": ["representation", "solver", "n_jobs"], "name": "linear_model.LogisticRegression_bench.track_test_score", "unit": "unit", "version": "19353dc4c888f4590aec2e9ebe12af624d866b4bbdeb495342ba69460c754cdd", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500}, "model_selection.GridSearch_bench.peakmem_fit": {"param_names": ["n_jobs"], "name": "model_selection.GridSearch_bench.peakmem_fit", "unit": "bytes", "version": "4b4c934238df386c3e923785b84e74bef5d8665857d0dd9ec8f39ace72a3b759", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000}, "linear_model.Lasso_bench.track_train_score": {"param_names": ["representation", "precompute"], "name": "linear_model.Lasso_bench.track_train_score", "unit": "unit", "version": "06b61e82c0cd8a83cd302f53167f87762bbde7d5fa3d98848f51d922cdc88d95", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500}, "svm.SVC_bench.peakmem_predict": {"param_names": ["kernel"], "name": "svm.SVC_bench.peakmem_predict", "unit": "bytes", "version": "58023b570ed67f99c31fdeaff83d30ed53b11d0c0c217136b63dcbdfb6787974", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500}, "linear_model.Estimator.track_test_score": {"param_names": [], "name": "linear_model.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "neighbors.KNeighborsClassifier_bench.peakmem_predict": {"param_names": ["algorithm", "dimension", "n_jobs"], "name": "neighbors.KNeighborsClassifier_bench.peakmem_predict", "unit": "bytes", "version": "4368d7ae7a6b009d81e182c7048c22d979576d66d20352dd55cfa2662360f9b2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KNeighborsClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'brute'", "'kd_tree'", "'ball_tree'"], ["'low'", "'high'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/neighbors.py:18", "timeout": 500}, "linear_model.LinearRegression_bench.peakmem_predict": {"param_names": ["representation"], "name": "linear_model.LinearRegression_bench.peakmem_predict", "unit": "bytes", "version": "afc68843881f4d8653b8b782a3e2e0d1446fac367d00c62c6c63ad9a789bc7b8", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500}, "ensemble.RandomForestClassifier_bench.track_test_score": {"param_names": ["representation", "n_jobs"], "name": "ensemble.RandomForestClassifier_bench.track_test_score", "unit": "unit", "version": "cf647d382f9df1c9518f72a59a494413d1d26c203d22be1aa003de38e6fcf0a4", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500}, "linear_model.ElasticNet_bench.track_test_score": {"param_names": ["representation", "precompute"], "name": "linear_model.ElasticNet_bench.track_test_score", "unit": "unit", "version": "5cde7e8049ff42ab8010d2d419af6da3b099e80cf17466d54c68a93e75a3ecda", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500}, "ensemble.GradientBoostingClassifier_bench.time_predict": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500, "repeat": 1, "name": "ensemble.GradientBoostingClassifier_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "806c2caa66bdddd7b7a51c08785510f4518cc3646261dec3d79080f70e64433a", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "cluster.Transformer.time_transform": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "cluster.Transformer.time_transform", "processes": 2, "sample_time": 0.01, "version": "84bed356d91274ed99ec044e4575b05968beeaa3ad5750f0ffdfd680d0cc7424", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "number": 0}, "linear_model.Lasso_bench.peakmem_predict": {"param_names": ["representation", "precompute"], "name": "linear_model.Lasso_bench.peakmem_predict", "unit": "bytes", "version": "78c9a09d21f512e240c138b7a6c324cf66b1785f9bfb8d5841c57bf614e42894", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500}, "decomposition.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "decomposition.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "decomposition.DictionaryLearning_bench.time_fit": {"param_names": ["fit_algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500, "repeat": 1, "name": "decomposition.DictionaryLearning_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "37366ccf3711a294f88e5b429730397a55dc066aab6a81ac394d44beba23b750", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'lars'", "'cd'"], ["1"]], "number": 1}, "ensemble.GradientBoostingClassifier_bench.track_test_score": {"param_names": ["representation"], "name": "ensemble.GradientBoostingClassifier_bench.track_test_score", "unit": "unit", "version": "9a77d1bd9feb5f31122f85fef579f20638e160a559ac4e56145f434efc904cc3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500}, "ensemble.GradientBoostingClassifier_bench.time_fit": {"param_names": ["representation"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500, "repeat": 1, "name": "ensemble.GradientBoostingClassifier_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "d762b219c4381f17e2f907b295ba8023dcab35e895d5573bbb08718d1f910908", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"]], "number": 1}, "svm.SVC_bench.peakmem_fit": {"param_names": ["kernel"], "name": "svm.SVC_bench.peakmem_fit", "unit": "bytes", "version": "b8777f1c3eb83fa1ba38afd13f9efac4a1858f378a2ec6fca19677205ca14dcd", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass SVC_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'linear'", "'poly'", "'rbf'", "'sigmoid'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/svm.py:14", "timeout": 500}, "decomposition.MiniBatchDictionaryLearning_bench.time_transform": {"param_names": ["fit_algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500, "repeat": 1, "name": "decomposition.MiniBatchDictionaryLearning_bench.time_transform", "processes": 1, "sample_time": 0.01, "version": "e750917aa35065ae5543411e158aa7e3b95f9abb2cb6c49139f0af23c11f933a", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'lars'", "'cd'"], ["1"]], "number": 1}, "linear_model.ElasticNet_bench.peakmem_fit": {"param_names": ["representation", "precompute"], "name": "linear_model.ElasticNet_bench.peakmem_fit", "unit": "bytes", "version": "e15b7a63abbfe1dc358daa7a2cec3af805e21339959e38e83267a18983a26e41", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500}, "neighbors.Estimator.peakmem_fit": {"param_names": [], "name": "neighbors.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "decomposition.PCA_bench.time_fit": {"param_names": ["svd_solver"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500, "repeat": 1, "name": "decomposition.PCA_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "fcdaa2065d9a565b9dd804ea77a8112f46b694df411eb3c409296a8f980f79a6", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'full'", "'arpack'", "'randomized'"]], "number": 1}, "ensemble.GradientBoostingClassifier_bench.peakmem_fit": {"param_names": ["representation"], "name": "ensemble.GradientBoostingClassifier_bench.peakmem_fit", "unit": "bytes", "version": "42e37d9b9d88568ed4993371683bcb9a60940c6cc9fb2595cdbc2dc590979bb8", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GradientBoostingClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:50", "timeout": 500}, "neighbors.Predictor.peakmem_predict": {"param_names": [], "name": "neighbors.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "cluster.KMeans_bench.time_transform": {"param_names": ["representation", "algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500, "repeat": 1, "name": "cluster.KMeans_bench.time_transform", "processes": 1, "sample_time": 0.01, "version": "ed480b6df06f3d6138ac1826429cefd8e5eb69101b04d43ae345cbe34dbc01db", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "number": 1}, "model_selection.Predictor.peakmem_predict": {"param_names": [], "name": "model_selection.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "linear_model.ElasticNet_bench.peakmem_predict": {"param_names": ["representation", "precompute"], "name": "linear_model.ElasticNet_bench.peakmem_predict", "unit": "bytes", "version": "3c365bb11e0c52397758eb4dd53507301fd647d03a2b0c52c963de5897951a4e", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass ElasticNet_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["True", "False"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:161", "timeout": 500}, "ensemble.RandomForestClassifier_bench.time_predict": {"param_names": ["representation", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/ensemble.py:17", "timeout": 500, "repeat": 1, "name": "ensemble.RandomForestClassifier_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "d870b7887c994f9bc1954265f3377c26e4039baca8ec94b429a7f97567e3247d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass RandomForestClassifier_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["1"]], "number": 1}, "decomposition.MiniBatchDictionaryLearning_bench.peakmem_transform": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.MiniBatchDictionaryLearning_bench.peakmem_transform", "unit": "bytes", "version": "d3a207881cea8adf8157dd034a493e0bf56a68f35612eb8eb249b18f0bd1a6e1", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass MiniBatchDictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:73", "timeout": 500}, "decomposition.PCA_bench.track_test_score": {"param_names": ["svd_solver"], "name": "decomposition.PCA_bench.track_test_score", "unit": "unit", "version": "36d73e0ad7c6c87bac3c41947b3f36eaf89c0e4727b4b6776303de42e0bca564", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass PCA_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'full'", "'arpack'", "'randomized'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:17", "timeout": 500}, "common.Transformer.peakmem_transform": {"param_names": [], "name": "common.Transformer.peakmem_transform", "unit": "bytes", "version": "55dbd993e965490c620531536fb2591b83c21b74a200fd0571e39565883beb13", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "linear_model.Lasso_bench.time_fit": {"param_names": ["representation", "precompute"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:201", "timeout": 500, "repeat": 1, "name": "linear_model.Lasso_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "ac6f5289f1218e4ef4e89e65c01b21a6fc1d8dd5e8ca0276253fd0b8beee22b4", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Lasso_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["True", "False"]], "number": 1}, "model_selection.GridSearch_bench.track_test_score": {"param_names": ["n_jobs"], "name": "model_selection.GridSearch_bench.track_test_score", "unit": "unit", "version": "d82bff130c8d99bc8d59c59b0f274af35c945b759e594ef20bac49f28e41c32e", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass GridSearch_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/model_selection.py:55", "timeout": 20000}, "linear_model.Ridge_bench.peakmem_predict": {"param_names": ["representation", "solver"], "name": "linear_model.Ridge_bench.peakmem_predict", "unit": "bytes", "version": "026b4c8995bcdd8fd4b87568353b7b275f2eab3b2f6d02f6072438c44af1d0c2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500}, "cluster.KMeans_bench.peakmem_predict": {"param_names": ["representation", "algorithm", "n_jobs"], "name": "cluster.KMeans_bench.peakmem_predict", "unit": "bytes", "version": "051e6b89bc6d06f967aa9972f5f4affbe79aeacade2e6046e072095e8c25b398", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500}, "svm.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "svm.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "linear_model.LinearRegression_bench.track_test_score": {"param_names": ["representation"], "name": "linear_model.LinearRegression_bench.track_test_score", "unit": "unit", "version": "68d07bb3706d4dabe64abd8de573aace38c902a5fdc12311597e3f7d992d8d78", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LinearRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:101", "timeout": 500}, "ensemble.Estimator.peakmem_fit": {"param_names": [], "name": "ensemble.Estimator.peakmem_fit", "unit": "bytes", "version": "b6c6a1ed30d053e4cdd1b019881c417fa432a9d2b64a32717923a6c6c6a60320", "code": "class Estimator:\n    def peakmem_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "peakmemory", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "neighbors.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "neighbors.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "manifold.Estimator.track_test_score": {"param_names": [], "name": "manifold.Estimator.track_test_score", "unit": "unit", "version": "537f0acc45adf640b50380c29beda2d93e6ee39683d969944aba35f389dac4e3", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "track", "params": [], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0}, "ensemble.Estimator.time_fit": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/common.py:94", "timeout": 60.0, "repeat": 0, "name": "ensemble.Estimator.time_fit", "processes": 2, "sample_time": 0.01, "version": "007d9af18dc0b235fd1b2417d078c06815b553f14776133b28fd874f16e1a064", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\n    def setup_cache(self):\n        clear_tmp()\n    \n        param_grid = list(itertools.product(*self.params))\n    \n        for params in param_grid:\n            data, estimator = self.setup_cache_(params) or (None, None)\n            if data is None:\n                continue\n    \n            data_path = get_data_path(self, params)\n            with open(data_path, 'wb') as f:\n                pickle.dump(data, f)\n    \n            X, _, y, _ = data\n            estimator.fit(X, y)\n    \n            est_path = get_estimator_path(self, Benchmark.save_folder,\n                                          params, Benchmark.save_estimators)\n            with open(est_path, 'wb') as f:\n                pickle.dump(estimator, f)", "type": "time", "params": [], "number": 0}, "cluster.Transformer.peakmem_transform": {"param_names": [], "name": "cluster.Transformer.peakmem_transform", "unit": "bytes", "version": "55dbd993e965490c620531536fb2591b83c21b74a200fd0571e39565883beb13", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "cluster.KMeans_bench.peakmem_transform": {"param_names": ["representation", "algorithm", "n_jobs"], "name": "cluster.KMeans_bench.peakmem_transform", "unit": "bytes", "version": "38f3f501315084811db2fb15accec51a08883922bf3f7feae008967013f1ef17", "code": "class Transformer:\n    def peakmem_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "peakmemory", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500}, "decomposition.DictionaryLearning_bench.track_test_score": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.DictionaryLearning_bench.track_test_score", "unit": "unit", "version": "2532b4286f2c2811ee4c58a3174a1d4ba9c2fd52c722b7eba9820e14cbdeb702", "code": "class Estimator:\n    def track_test_score(self, *args):\n        if isinstance(self, Predictor):\n            y_val_pred = self.estimator.predict(self.X_val)\n        else:\n            y_val_pred = None\n        return float(self.test_scorer(self.y_val, y_val_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500}, "linear_model.Ridge_bench.time_fit": {"param_names": ["representation", "solver"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500, "repeat": 1, "name": "linear_model.Ridge_bench.time_fit", "processes": 1, "sample_time": 0.01, "version": "6d0a5851e8a31ab1745e268e231eb31974298bf0526a07580e9bb2fa62e4e24a", "code": "class Estimator:\n    def time_fit(self, *args):\n        self.estimator.fit(self.X, self.y)\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "number": 1}, "cluster.KMeans_bench.track_train_score": {"param_names": ["representation", "algorithm", "n_jobs"], "name": "cluster.KMeans_bench.track_train_score", "unit": "unit", "version": "398c81ec1b91ff55cad5a40f7da9ef39e0d55e7165f1cc50c0dd6ee7e8dde47f", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass KMeans_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'full'", "'elkan'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/cluster.py:20", "timeout": 500}, "decomposition.Transformer.time_transform": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "decomposition.Transformer.time_transform", "processes": 2, "sample_time": 0.01, "version": "84bed356d91274ed99ec044e4575b05968beeaa3ad5750f0ffdfd680d0cc7424", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)", "params": [], "number": 0}, "linear_model.LogisticRegression_bench.time_predict": {"param_names": ["representation", "solver", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:20", "timeout": 500, "repeat": 1, "name": "linear_model.LogisticRegression_bench.time_predict", "processes": 1, "sample_time": 0.01, "version": "a185f9e03af71280d321d502fe4b69b46780fa3e0c608a3076b80c2f443acd83", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass LogisticRegression_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'dense'", "'sparse'"], ["'lbfgs'", "'saga'"], ["1"]], "number": 1}, "model_selection.CrossValidation_bench.peakmem_crossval": {"param_names": ["n_jobs"], "name": "model_selection.CrossValidation_bench.peakmem_crossval", "unit": "bytes", "version": "03bc19e44a4d7ba8dd49f057936e1e12aad487c5b38f79672bdd40f208230634", "code": "class CrossValidation_bench:\n    def peakmem_crossval(self, *args):\n        cross_val_score(self.clf, self.X, self.y, **self.cv_params)\n\n    def setup(self, *params):\n        n_jobs, = params\n    \n        data = _synth_classification_dataset(n_samples=50000, n_features=100)\n        self.X, self.X_val, self.y, self.y_val = data\n    \n        self.clf = RandomForestClassifier(n_estimators=50,\n                                          max_depth=10,\n                                          random_state=0)\n    \n        cv = 16 if Benchmark.data_size == 'large' else 4\n    \n        self.cv_params = {'n_jobs': n_jobs,\n                          'cv': cv}", "params": [["1"]], "timeout": 20000, "type": "peakmemory"}, "linear_model.Ridge_bench.track_train_score": {"param_names": ["representation", "solver"], "name": "linear_model.Ridge_bench.track_train_score", "unit": "unit", "version": "a816d9c4ed9918a4c5026667051e6b112dccb8841a067edcfe804815a904857f", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass Ridge_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'dense'", "'sparse'"], ["'auto'", "'svd'", "'cholesky'", "'lsqr'", "'sparse_cg'", "'sag'", "'saga'"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/linear_model.py:61", "timeout": 500}, "ensemble.Predictor.time_predict": {"param_names": [], "unit": "seconds", "min_run_count": 2, "warmup_time": -1, "timeout": 60.0, "type": "time", "repeat": 0, "name": "ensemble.Predictor.time_predict", "processes": 2, "sample_time": 0.01, "version": "303a5601ad8d3b35289320e863bb689b78603318a7f93ba47e2a00410890c07d", "code": "class Predictor:\n    def time_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "number": 0}, "linear_model.Predictor.peakmem_predict": {"param_names": [], "name": "linear_model.Predictor.peakmem_predict", "unit": "bytes", "version": "233a20475cc02f3c16b910ef8aba79e7e12989c90377144618bd55a5843898e2", "code": "class Predictor:\n    def peakmem_predict(self, *args):\n        self.estimator.predict(self.X)", "params": [], "timeout": 60.0, "type": "peakmemory"}, "decomposition.DictionaryLearning_bench.track_train_score": {"param_names": ["fit_algorithm", "n_jobs"], "name": "decomposition.DictionaryLearning_bench.track_train_score", "unit": "unit", "version": "630defa2f730e4e82f5e04754d3a52f55a9be9b934e8c179bea8fd38cdd2cc25", "code": "class Estimator:\n    def track_train_score(self, *args):\n        if isinstance(self, Predictor):\n            y_pred = self.estimator.predict(self.X)\n        else:\n            y_pred = None\n        return float(self.train_scorer(self.y, y_pred))\n\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "track", "params": [["'lars'", "'cd'"], ["1"]], "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500}, "decomposition.DictionaryLearning_bench.time_transform": {"param_names": ["fit_algorithm", "n_jobs"], "unit": "seconds", "min_run_count": 1, "warmup_time": 0, "setup_cache_key": "/home/pandas/scikit-learn/benchmarks/decomposition.py:43", "timeout": 500, "repeat": 1, "name": "decomposition.DictionaryLearning_bench.time_transform", "processes": 1, "sample_time": 0.01, "version": "a2f8638a13a2e416eacbb810f7385edcfed45ba5315fbb381d0c4bc8eb4881b9", "code": "class Transformer:\n    def time_transform(self, *args):\n        self.estimator.transform(self.X)\n\nclass Estimator:\n    def setup(self, *params):\n        if hasattr(self, 'setup_'):\n            self.setup_(params)\n    \n        data_path = get_data_path(self, params)\n        with open(data_path, 'rb') as f:\n            self.X, self.X_val, self.y, self.y_val = pickle.load(f)\n    \n        est_path = get_estimator_path(self, Benchmark.save_folder,\n                                      params, Benchmark.save_estimators)\n        with open(est_path, 'rb') as f:\n            self.estimator = pickle.load(f)\n    \n        self.make_scorers()\n\nclass DictionaryLearning_bench:\n    def setup_cache(self):\n        super().setup_cache()", "type": "time", "params": [["'lars'", "'cd'"], ["1"]], "number": 1}}, "show_commit_url": "#", "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]], "machines": {"asv-runner": {"os": "Linux 3.13.0-116-generic", "machine": "asv-runner", "ram": "501692", "version": 1, "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "arch": "x86_64"}}, "project_url": "scikit-learn.org/", "graph_param_list": [{"python": "3.6", "scipy": "1.1", "machine": "asv-runner", "ram": "501692", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "pillow": "5.3", "arch": "x86_64", "branch": "master", "os": "Linux 3.13.0-116-generic", "numpy": "1.14", "cython": "0.28", "joblib": "0.12"}], "hash_length": 8, "revision_to_hash": {"57643": "8c439fbe8c340389d7f9d99884180b2e7b21a79f", "11524": "7eb39fa0dc43ce485d3af2857c587811332eb148", "5382": "cf5c72eb9dc7696b5fac61466605b2860942946e", "70408": "ec35ed226ca104e841238f2fac24269c2f9f2730", "33545": "b5383488c4b8b97b000585e61ed4e2178fa84d36", "13322": "b9ed384195df7b8d7824eac42f7b1bee58ef321c", "2007": "dc72677a9c13a656cda8be4b23cd897b56109b4b", "9555": "79749fd2939781e201191ef081143d8a575984e7", "813": "47890ac823314f1a9e2920dff7575850af56c273", "5395": "3b48abd5fb0fa4f87c09f6b21d0d1f0e8b7873e4", "66327": "7b136e92acf49d46251479b75c88cba632de1937", "3354": "8a195624128da773c7d584d9352f65d8241cc92d", "32943": "cd12906cabf3576a8c236a4128e959360037dde0", "70336": "15b54340ee7dc7cb870a418d1b5f6f553672f5dd", "30238": "4cc0235ec1ee654ea85cf465d280d33bcb1db20c", "1312": "f13dba15e3d56455c58867685ec554755a346c32", "46470": "83816c2a95e2ae3c4b3546912de4f4266e0c230f", "4390": "f7c9f24511d9b32add23e75bbf0a2a6c223d932f", "811": "c7208c1a43335179ccddafc7748c1d7224e904fc", "7213": "3f1ea662ee1b1b08cee63cc31e4e3e36ec532208", "2862": "03a85c19ac2854f2a33f613f87e81fd5f4560f55", "25903": "bc8666f60f2c8c9ba16b30fbe0b342c3b94213e6", "70448": "2b571c039d6f4e26ddfd10c3ea280d64af2f3924", "33800": "82fb053536803f172def9f64e0d62151529173a0", "70450": "abf77219043a13efbd3e709cd017eeef60852892", "60214": "f659f5539f9d36ebec4e1d98538919b55299bba4", "4407": "8b2aaf069306d6b61b49a29d32123e69991c153b", "826": "b573fc0dcbfc2528807b5f0f8c0bc719c25d36f4", "34875": "ea042f1485d5fe45bcf2475c3070cab4e5ac3381", "34876": "51a765acfa4c5d1ec05fc4b406968ad233c75162", "70463": "69dbdf4f9b6571f323630649c0563f26f989a121", "70464": "0f801d7ba89570ce5245807410f65f78ad95041c", "59489": "eb6764936c9558553f7a7203a6aaa0ddc6497875", "69451": "a243d96336cb4f50ca3635b3062a273f3dc5183a", "590": "a40d325cec40da6cbcff8193a4ab4890823dfc76", "37455": "4d9fab55b9e14e01a7d13344a2612ed802d0c113", "49233": "b661a9c81930429cba4a56af291ce2bf8c59f8c9", "16719": "3e89aa5f42519d7f0230b99948553a8eb33dc1f4", "21587": "d13928cc0653f52de55e22118915b0c5bcba13d7", "37460": "b687ab371d990373c4a599399172cf31d2f0c350", "16726": "86e8b0d2a3533253a7082591f572d73897c02a2c", "70489": "b3d716c92496e3145fca2f0301ec9829caf85f2d", "47201": "81ba62fe053d56e228ce097cbca91bc5de2e3f82", "21347": "fc0b766ceca487504b040896124a3d809af2975b", "70501": "8342548ae18b36d814440b46ed154c96bd8e15ce", "70502": "61f6f5bcd1c85badd8008e8004609c75c31fe95e", "30567": "df9f90cfa8795b6d85056f70177fb783d6ecafda", "26216": "68280fb4254b0781a66a1d2689708068799f0bbe", "26217": "b4e8b3ca4366901998c116540902d2687e0a5450", "27239": "d4906939b1ef86657e6617d8fa078a0fbe0c2472", "70509": "c315bf931466655191b005f9e695c0d0a1c14219", "39279": "a5ab948cbc366d705b1f8db8687c7162f51de22d", "30240": "09dc09a1e9d9088c2cb783c818980f5509d77a11", "21619": "34c4908369968dd0f77897ec9dd8c227e7545478", "4212": "af6ab92b3bc0286e401218631859ee50f8be23f7", "30837": "bb39b493ef084a4f362d77163c2ca506790c38b6", "745": "8a4bc2f03733e530591d6641f266a60670a373f1", "12180": "114822b1e18c9d7f887c58b8a3b2c279bdce6d35", "382": "e6989efd71a2adddd03979d1fe7a2e82e37ea51f", "37504": "cef2b62701f80ff50a37528b5337dd9a96f0069e", "9536": "34334f5ce6b1f166efda8652310133f9fc36ed04", "13955": "0dd2e39c1f7aec6830e4348fa63a04939252a0a1", "646": "ddc6d8f80dcf0a6cdd606efdefb89211a4dc7e9d", "395": "8ff9fc895bd6032636e3716f02773fdcd9cdd3d3", "3437": "897201083fd584a310cb8a2870704470dc28474a", "7568": "bfd36aa504078ce58f727f7f37e17349ab290e7d", "63124": "7389dbac82d362f296dc2746f10e43ffa1615660", "755": "8216797c4b1abca9dafd8de9d65472d32450b389", "1945": "d6b4444bbcc54a241cc955a5ceea80be15e7db2b", "1947": "60589710bd64e1fb2ede4d34d7fbb57e83892c86", "17308": "8075887585b0449b6e87ee54c2ca4dbd56960e1e", "3997": "5a1e1f48433ba867fb035b9dc31882f8d90f7744", "31647": "25082e522c90fa9184789f6bc450278b3e18fdda", "27814": "2068ff2fd94abe4f14b0334eb4372a64b268f6b4", "13295": "0fede44fb39d691e873d58a4210452aa93c462a5", "32936": "c0c2c737971b52e04b1f6516dfa1bfb05b30f4fd", "1949": "eba9984f735478d47c956ede42bdefd28aa6f9f6", "70515": "9d7b804603c3c3d7d712dbc3bdb47b424eeb8bdf", "9504": "4533aa33daa35dd68c6d433b1d3560ff2b65b252", "68841": "60eb00c72541b42697fa017fdfc74935299fc455", "3516": "bdf3332f9694f8ecbdcf7ab0391989e24ac13f88", "70335": "162216af26605b4455cb3a6aed1bb83af400fbc6", "11456": "34c2904a95a707c6e6148480a7e2c86a0f7ad86b", "45505": "759f4637f9f9471cf4218b9dffc00b464790485b", "68802": "be2f62b2bfb40747a2dab20f29a341879b247a3c", "587": "0e1faafec9871df73e875a0aadfcb67ec578c0e5", "1231": "c83447b72c4f48ceb8249ea394ebf042618b8a2a", "33542": "918005fd5441650ae4a49b510bcabff69ae898bf", "26580": "518002955b0d6539f8f5e2710b9cefb178cc8ee2", "69591": "b7b4d3e2f1a65bcb6d40431d3b61ed1d563c9dab", "13272": "4bc8822c846de0d3b70d006ea32235d4375a575b", "1999": "0f148e0011fb873bcd70cb3cc01690e7d621f670", "70364": "ccd3331f7eb3468ac96222dc5350e58c58ccba20", "70367": "6675c9e3429ec6a89c8e08c84ce24518a52f3236", "46304": "36bc053a69ac5b9ba5a54cb2bd19adb33dcde50e", "37857": "38030a00a7f72a3528bd17f2345f34d1344d6d45", "3299": "c07f9574c902b68744434d7b43f7394e0801d64e", "46308": "62523372fc6331fc55df73a94d65bfa48c45c193", "998": "65d06f830ec6604b44d1a0510255868a8f762e3a", "2793": "2c3d9e2fce5d2bae27e10657aa3c7ff45c39b190", "68842": "93b19b04d3c81f9824b23e1b910126d51f3cd342", "34283": "2999a2f544cd56575d940d7ab359819b392cccae", "34284": "3c546fd1226a895f68d317d2430daa71fc13e093", "11502": "73fdf6a9c982758be6da71a932ec4a3613eccbbf", "62447": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1", "7155": "3e3872cde115550b75bb25c47c109b8bfd070eab", "33780": "da4f480a6adf5fed30a42500fe0e5a21c404ac2a", "1150": "959e267898090e3c68ee118d5048afad124ff61d", "11511": "4ae44b0fe10b3ddf8390cfa8deae4dec45c40666", "1016": "9072aa593d76262fe445cf492ffac77e853501ea", "69887": "e8602bc04e5c7ab32e6acb887b68172098f7f1e2", "2815": "87741a7c65768464eb15f0976ed4bf6312795e7f"}, "params": {"python": ["3.6"], "scipy": ["1.1"], "machine": ["asv-runner"], "ram": ["501692"], "cpu": ["Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz"], "pillow": ["5.3"], "cython": ["0.28"], "branch": ["master"], "os": ["Linux 3.13.0-116-generic"], "numpy": ["1.14"], "arch": ["x86_64"], "joblib": ["0.12"]}, "project": "scikit-learn"}