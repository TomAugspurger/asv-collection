{"params": {"cpu": ["Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz"], "machine": ["asv-runner"], "branch": ["master"], "os": ["Linux 3.13.0-116-generic"], "ram": ["501692"], "numpy": [""], "arch": ["x86_64"], "python": ["3.5"]}, "graph_param_list": [{"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "machine": "asv-runner", "branch": "master", "os": "Linux 3.13.0-116-generic", "ram": "501692", "numpy": "", "arch": "x86_64", "python": "3.5"}], "revision_to_hash": {"517": "a5f921ef1c91cb583d7e022e136df470eb252334", "520": "6e6fe01b0f65e050fbd7b77d15013fa40a8f2912", "1035": "7f63af45d8e6314ec575ff1f81094672d710c780", "1037": "491db71896547a57446fd63a3f2d273638c63e3f", "527": "bcf7c631166bfae106a1c84d033a3aee5f9f814e", "1298": "6f5906f87ef8894c1bc827e420d111db82333ff7", "1047": "f4549877622db8f08d70e7ee37e4bbc0060be962", "538": "c2d2879b681940813132566c1afae53b54db583d", "1199": "1e82a667dd076d3af44eb00a99d714f8a6274e10", "542": "c01b1407532d9bace3de721ca27ba390a00b5064", "297": "714a512089a9eb78585ebbf6b649d7df71b21866", "301": "cc47d5234766b7f00e2b6c50e2714e86a6f897a4", "137": "a8e05c384746f00f0d145459e21af391cc26acd6", "315": "a2cba91c277ff0638c430f5731207d2733087cbb", "319": "4d52ea4c940485ed6c33dc55146a6e8fbacf2def", "523": "3c55421e0bf3821f9afbe0bf0b532999f58730c7", "2632": "16c3074658b332db8057a88c79bf21b29f88169a", "653": "373a176877ee58551e3f0a2acef28d97935c4519", "2645": "94c9c8f2f85a19c52954711434a922f845e21679", "856": "8f297aa34554b8ab840e9eff464353abe2932506", "2703": "122f5f12100f1cc36fdee75eca74102ba2ba68df", "863": "68b99a20857acd29086ff0db9a608929aa936397", "2657": "78b0a41818757612e651ad4dade5f19a226849e9", "2658": "830dc7d78870cfa3bb7467f536a24aa81a0a7e02", "359": "f729c8536ef456e52cec8b35f59f06ccaf598c8c", "360": "cfb70370c65e15c6569b9f03e0d643c680d19cad", "2663": "9101ee9b939399a3185cdeffa6a97a97eebd1059", "877": "1027e576f7a514708004efc0a9ebdf4b4f3c5352", "1135": "b24d72e4c4c183017ddd1688c9fccdd1f0a878f6", "2674": "2f252e3dd352501996b949149a0631dbfd18cd9a", "627": "b584962dff589624d2a6ecb7692c999091909603", "1143": "46ddd8d7e78e223f834860c8a984c082daea5eb6", "148": "ee731a9738db58cb71693a49b5a7e5a7b883e775", "379": "f7ea1e108ba0337281472072ed8fe7c55e231b18", "1150": "70a22ea9ef994bf170c328e057edd38e839292c5", "2749": "6eb3b44bfa95e7d840454f32ff0fb527858e4f8e", "2692": "013fc83d83babf06861a53bfa5d7969948e0a709", "2681": "acca6b95ed9e28498441d630ed2ddf674b66c8b8", "393": "8f8974006276a0e22491cc99be7da220e8a11047", "397": "05be47c19f90040715ce3460178c91b01a0d1ee0", "2702": "3d53d34a16ecc84f1c5810390524ad3be1140ede", "2669": "9db62d5cdc2822d0a967b735d38c050a47fb2c01", "656": "868e633645def6660581278c851e20fbcdc98a6d", "402": "3d53d851db31bfc60c7aa9a0b3b075e598a7e78e", "2755": "654bc2fe146fb8f2d6bc81642f19e11ddc6ba35d", "2708": "4f1ca521480713c403e1ddd362af43def6a059c8", "406": "2e5a2d2aaef8f381e3a844936f1bbd885e58d848", "452": "3312750fb8c7b642bc8a57ba9b5faac72207bb89", "2714": "30a2eddb4b32b599aee07b9807d31c7bcc4efba9", "667": "d16ca3fd6bbc26f3af6a9898b7d16413362e9cd4", "2716": "f2c510a5bb90486e5bbb9b5414814b3b79daff04", "669": "6798901d8ba4d6c2c754ef9ae80eb6b3173a13c5", "2720": "cb303246bdd68751e7f61252505ea7dfd789bce8", "2722": "b9e27d6c6fae8d5551e486e970a0eed18c19a0c6", "163": "6f8fcefa3c159fdd0b4b3f2fca4b0b229137bc57", "2725": "f1b9205dfefa426db67d78938d5d253fa1ae89c3", "678": "3d90e83479be4178cddc79794466eff1cf131c4f", "2729": "7be116a5a6bd4b304c1b0be66bc44fc84cfb0267", "2733": "c57fc20d81a66985ef0591d7a74a3c87baa08ee4", "142": "a378c22bf5c4abf8749cffa366f844dd4f293813", "1437": "304fc58c156b0b2af79efe9cb74c0d9f98c75e0e", "1200": "d24ce68ab1ef6aa671b81868f1cad003613d7f1d", "1201": "629bc99f6947884c9a61997827d0e1e9966b742a", "2739": "fec6daf5439368640cdba74e08b767b3b3213d89", "1464": "9809359065adf268bba1f0b85e3b9a0b70fd1cf2", "2490": "bb027ab7dfd01ce618c04a9bbac12f7fa1fe2857", "2506": "c675d5d21294ed4868824b42086313a33e29d760", "1219": "aeb018af545e025654176ffe9ae876bda1bddb89", "2756": "d4ee44ada1abfe3ebc2a653796aecaebe48ab931", "197": "9f5b08d973b4e3196879398c27cd5816cf09900d", "2762": "be7edc9d555286a5e7354d533b5b3606a527e221", "2763": "a99273bb0fe1d77c5e5b1b5512c6a9fa1285a125", "978": "74b63abd2864c90d2b8b63b07665da6cfbe38376", "2723": "6abf62d21fae20b74faf3782bbf6b9ff142546f0", "469": "98acdc92a63d7f5a2e3824dfcb437e72cb335130", "377": "5e7762192f524998c1411d9b2541efe88664ea80", "731": "40fc9389c4e18510ba2a19c8bd8502fdbdd7e165", "990": "fe17f5795d3f0ea55463ce53a004443cf0132321", "482": "0f8b769bc077877a11f5baa93261de4188ca0cc8", "486": "173c66927fe139f8c0e562f995bff141cd21a8c5", "489": "6eea8f1df2ff5d0805507c45455c59b3b7730891", "2538": "3556ca4f39b1594e3666414ad1982d58f8e5f951", "1003": "7182908e70d83d4b0f028789c3168c94888647c3", "1887": "04ceb168ede7ec55daf48c81977a5dc4b369d958", "497": "660289433cdebf515447ab4d004631470d1090ae", "502": "77cbccbb2e4700ca100df87b55291999d9c3b438", "1534": "8bbc500c60f14cc21b161b9f62c2be4201116a6a", "511": "a98b0ebc0b6ef85811326badd750a42b2922c4d2"}, "project": "joblib", "hash_length": 8, "tags": {"0.12.2": 2538, "0.9.0b2": 1135, "0.4.3": 148, "0.5.0": 359, "0.7.0a": 653, "0.9.2": 1201, "0.8.3-r1": 1037, "0.5.3": 397, "0.11": 1887, "0.7.0b": 656, "0.8.1": 990, "debian/0.4.3-1": 163, "0.12.3": 2632, "0.6.4": 538, "debian/0.6.1-1": 520, "0.6.0.b3": 497, "0.12": 2490, "debian/0.6.0_b3-1": 502, "0.6.2": 523, "0.8.0a2": 863, "0.4.1": 137, "debian/0.5.4-1": 406, "0.5.1": 377, "0.9.1": 1200, "0.6.3": 527, "0.5.2": 393, "0.9.0": 1199, "0.9.3": 1219, "0.5.7": 452, "0.8.0a3": 877, "0.8.0": 978, "0.8.4": 1047, "0.13.2": 2763, "0.12.4": 2645, "0.4.6": 315, "0.6.0": 511, "0.8.2": 1003, "0.9.4": 1298, "0.5.4": 402, "0.8.3": 1035, "0.13.1": 2756, "debian/0.4.6-1": 319, "0.9.0b3": 1143, "0.4.2": 142, "0.6.0a": 469, "0.13.0": 2723, "0.8.0a": 856, "0.6.0.b2": 486, "0.10.2": 1464, "0.10.3": 1534, "0.7.0c": 667, "0.10.0": 1437, "0.7.0d": 669, "0.9.0b4": 1150, "0.4.4": 197, "0.6.1": 517, "0.4.5": 297, "0.6.0.b": 482, "debian/0.4.5-1": 301, "debian/0.4.6-2": 360, "0.6.5": 627, "0.12.5": 2657, "0.7.0": 678, "0.12.1": 2506, "debian/0.6.0_b2-1": 489, "debian/0.5.1-1": 379, "debian/0.6.4-1": 542, "0.7.1": 731}, "revision_to_date": {"517": 1328481417000, "520": 1328493868000, "1035": 1408521057000, "1037": 1408871411000, "527": 1329320170000, "1298": 1453124071000, "1047": 1416825322000, "538": 1336395032000, "1199": 1444826355000, "542": 1336444553000, "297": 1284626484000, "301": 1286403738000, "137": 1278151342000, "315": 1290366675000, "319": 1290441203000, "523": 1328551016000, "2632": 1535637223000, "653": 1353360841000, "2645": 1536139043000, "856": 1387560725000, "2703": 1541175960000, "863": 1387812016000, "2657": 1536845970000, "2658": 1536846145000, "359": 1301637663000, "360": 1302112974000, "2663": 1538742107000, "877": 1389796495000, "1135": 1435577985000, "2674": 1539189388000, "627": 1348262165000, "1143": 1437574206000, "148": 1279814777000, "379": 1302698504000, "1150": 1440675892000, "2749": 1547217019000, "2692": 1540458893000, "2681": 1539679822000, "393": 1309010526000, "397": 1309011933000, "2702": 1541175846000, "2669": 1538759851000, "656": 1353445440000, "402": 1317287116000, "2755": 1547231325000, "2708": 1541192855000, "406": 1318905222000, "452": 1325067629000, "2714": 1541356905000, "667": 1360250723000, "2716": 1541511440000, "669": 1360334853000, "2720": 1541518632000, "2722": 1541577561000, "163": 1280663142000, "2725": 1542571974000, "678": 1361339487000, "2729": 1542962476000, "2733": 1544631639000, "142": 1279122747000, "1437": 1468393509000, "1200": 1444828987000, "1201": 1444843971000, "2739": 1547115558000, "1464": 1472480915000, "2490": 1529682548000, "2506": 1531838900000, "1219": 1446215824000, "2756": 1547232586000, "197": 1282520771000, "2762": 1550072261000, "2763": 1550072348000, "978": 1401277862000, "2723": 1541519676000, "469": 1325609374000, "377": 1302675358000, "731": 1374850867000, "990": 1401886740000, "482": 1325950489000, "486": 1325955541000, "489": 1326235072000, "2538": 1533211278000, "1003": 1404302309000, "1887": 1488450990000, "497": 1326363715000, "502": 1326385163000, "1534": 1473149666000, "511": 1328462627000}, "project_url": "https://joblib.readthedocs.io/en/latest/", "show_commit_url": "https://github.com/joblib/joblib/commit/", "benchmarks": {"bench_parallel_time.BytesSuite.time_bytes_as_input": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.BytesSuite.time_bytes_as_input", "code": "class BytesSuite:\n    def time_bytes_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.bytes) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.bytes = os.urandom(size)", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with bytes as inputs: running time", "processes": 1, "version": "ff7f8aaf1bf41dded8897fc45795a839a58771612a96607b25966fa759765f1c", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.DictSuite.peakmem_dict_as_output": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.DictSuite.peakmem_dict_as_output", "code": "class DictSuite:\n    def peakmem_dict_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n                delayed(lambda x: dict(zip(range(x), range(x))))(size)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.dict = make_dict(size)", "param_names": ["size"], "version": "7b065a71323c75f2767246ebf663651ebfdd6af10ab93d5d203c87d02d9e79ff", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with dicts as outputs: peak memory usage", "unit": "bytes"}, "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_input": {"params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_input", "code": "class NpArraySuite:\n    def peakmem_np_array_as_input(self, size, use_memmap):\n        res = Parallel(\n            n_jobs=N_JOBS_MAX, max_nbytes=self.max_nbytes)(\n                delayed(np.sum)(self.array) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "version": "9d8a90f9f055cf9c732bb3e58c2b208a699d62e3ae2346625a0fb7ce4f31d78b", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with numpy arrays as inputs: peak memory usage", "unit": "bytes"}, "bench_parallel_time.DictSuite.time_dict_as_output": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.DictSuite.time_dict_as_output", "code": "class DictSuite:\n    def time_dict_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n                delayed(lambda x: dict(zip(range(x), range(x))))(size)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.dict = make_dict(size)", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with dicts as outputs: running time", "processes": 1, "version": "5f3c1db9c895bc37abadc14b06a047f8cb55b6294a5d37e75deeb170d61d363c", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.ListSuite.peakmem_list_as_input": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.ListSuite.peakmem_list_as_input", "code": "class ListSuite:\n    def peakmem_list_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.list) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.list = list(range(size))", "param_names": ["size"], "version": "f03ed0b0ab0cf112686609f4617fcf6b8321af0c57f9d7c1edd4f4ef495eee1e", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with lists as inputs: peak memory usage", "unit": "bytes"}, "bench_parallel_time.ListSuite.time_list_as_input": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.ListSuite.time_list_as_input", "code": "class ListSuite:\n    def time_list_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.list) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.list = list(range(size))", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with lists as inputs: running time", "processes": 1, "version": "59c92fc8d8fe8f4167b5c414d504815f592e36844a560a3be8d90de7a348c245", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.ListSuite.peakmem_list_as_output": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.ListSuite.peakmem_list_as_output", "code": "class ListSuite:\n    def peakmem_list_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n                delayed(lambda x: list(range(x)))(size)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.list = list(range(size))", "param_names": ["size"], "version": "bf39f6c0c4afdb5b689e1d1dd3e1cdb500db199c22b9873b264b3d4708bd2410", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with lists as outputs: peak memory usage", "unit": "bytes"}, "bench_parallel_peakmem.DictSuite.peakmem_dict_as_input": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.DictSuite.peakmem_dict_as_input", "code": "class DictSuite:\n    def peakmem_dict_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.dict) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.dict = make_dict(size)", "param_names": ["size"], "version": "35730e8ef1b95cce9f8063ad6acd8134802f545805911907a79fe5aa17786f1b", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with dicts as inputs: peak memory usage", "unit": "bytes"}, "bench_parallel_time.ListSuite.time_list_as_output": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.ListSuite.time_list_as_output", "code": "class ListSuite:\n    def time_list_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n                delayed(lambda x: list(range(x)))(size)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.list = list(range(size))", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with lists as outputs: running time", "processes": 1, "version": "96a5724ed3babd9b47edae0e39dbd59705625c853b6ee870f1572534a5eadec7", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_output": {"params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_output", "code": "class NpArraySuite:\n    def peakmem_np_array_as_output(self, size, use_memmap):\n        res = Parallel(\n            n_jobs=N_JOBS_MAX,\n            max_nbytes=self.max_nbytes)(delayed(\n                lambda x: np.random.randn(*x))(size)\n                for i in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "version": "667891dcdce9d12c5217755ab49533bddc3e83523744aaeb43a392984e5cd1e5", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with numpy arrays as outputs: peak memory usage", "unit": "bytes"}, "bench_parallel_time.DictSuite.time_dict_as_input": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.DictSuite.time_dict_as_input", "code": "class DictSuite:\n    def time_dict_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.dict) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.dict = make_dict(size)", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with dicts as inputs: running time", "processes": 1, "version": "d6f66c12aa78ca64d7c3dd5fc934382675b87c6cc99adbe03c91081c9158f074", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_time.NpArraySuite.time_np_array_as_input": {"number": 1, "params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_time.NpArraySuite.time_np_array_as_input", "code": "class NpArraySuite:\n    def time_np_array_as_input(self, size, use_memmap):\n        \"\"\"make the parent create big arrays and send them to child processes\n    \n        For sufficiently large sizes (size>1e6 by default), memmapping will be\n        automatically used\n        \"\"\"\n    \n        res = Parallel(\n            n_jobs=N_JOBS_MAX, max_nbytes=self.max_nbytes)(\n                delayed(np.sum)(self.array) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "type": "time", "pretty_name": "Parallel calls with numpy arrays as inputs: running time", "processes": 1, "version": "5c25b4cb17ee26d85e5b0e8557b93bb517491785d4cae5203519230ca73130d3", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_time.NpArraySuite.time_np_array_as_output": {"number": 1, "params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_time.NpArraySuite.time_np_array_as_output", "code": "class NpArraySuite:\n    def time_np_array_as_output(self, size, use_memmap):\n        res = Parallel(\n            n_jobs=N_JOBS_MAX,\n            max_nbytes=self.max_nbytes)(delayed(\n                lambda x: np.random.randn(*x))(size)\n                for i in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "type": "time", "pretty_name": "Parallel calls with numpy arrays as outputs: running time", "processes": 1, "version": "3b67f76cd00c79fe9885bea17584d0dbe589701001d891557b78f651f14e2446", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.BytesSuite.peakmem_bytes_as_output": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.BytesSuite.peakmem_bytes_as_output", "code": "class BytesSuite:\n    def peakmem_bytes_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(os.urandom)(size) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.bytes = os.urandom(size)", "param_names": ["size"], "version": "7e63aa83f0cf43530340e9b35d708b2aec0b67d0429dff2a38a8abeba4f0a4ce", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with bytes as outputs: peak memory usage", "unit": "bytes"}, "bench_parallel_time.BytesSuite.time_bytes_as_output": {"number": 1, "params": [["10000", "100000", "1000000"]], "name": "bench_parallel_time.BytesSuite.time_bytes_as_output", "code": "class BytesSuite:\n    def time_bytes_as_output(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(os.urandom)(size) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.bytes = os.urandom(size)", "param_names": ["size"], "type": "time", "pretty_name": "Parallel calls with bytes as outputs: running time", "processes": 1, "version": "3fc1f11d1376eb8735d332560329eb9fd6d2bdafa99c0e594626c4cacf339d09", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_time.NpArraySuite.time_np_array_as_input_and_output": {"number": 1, "params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_time.NpArraySuite.time_np_array_as_input_and_output", "code": "class NpArraySuite:\n    def time_np_array_as_input_and_output(self, size, use_memmap):\n        res = Parallel(\n            n_jobs=N_JOBS_MAX,\n            max_nbytes=self.max_nbytes)(delayed(\n                lambda x: np.linalg.svd(x))(self.array)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "type": "time", "pretty_name": "Parallel calls with numpy arrays as outputs and inputs: running time", "processes": 1, "version": "796f43469365ca76a928e94445ea1cd1abbe7ed40678be12d58d3cb94839e871", "sample_time": 0.01, "min_run_count": 2, "unit": "seconds", "warmup_time": -1, "timeout": 180, "repeat": 1}, "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_input_and_output": {"params": [["(100, 100)", "(300, 300)", "(1000, 1000)"], ["True", "False"]], "name": "bench_parallel_peakmem.NpArraySuite.peakmem_np_array_as_input_and_output", "code": "class NpArraySuite:\n    def peakmem_np_array_as_input_and_output(self, size, use_memmap):\n        res = Parallel(\n            n_jobs=N_JOBS_MAX,\n            max_nbytes=self.max_nbytes)(delayed(\n                lambda x: np.linalg.svd(x))(self.array)\n                for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size, use_memmap):\n        self.array = np.random.randn(*size)\n        if use_memmap:\n            # we force memmmaping for every array by setting the object size\n            # threhsold above which memmaping is activated to its minimum\n            # value (1bytes)\n            self.max_nbytes = 1\n        else:\n            # setting memmap to None deactivates the memmaping option\n            self.max_nbytes = None", "param_names": ["size", "use_memmap"], "version": "38787bcd542332de62ca0825fc6f194476d3237f924fcbeac64721ed2563e4ed", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with numpy arrays as outputs and inputs: peak memory usage", "unit": "bytes"}, "bench_parallel_peakmem.BytesSuite.peakmem_bytes_as_input": {"params": [["10000", "100000", "1000000"]], "name": "bench_parallel_peakmem.BytesSuite.peakmem_bytes_as_input", "code": "class BytesSuite:\n    def peakmem_bytes_as_input(self, size):\n        res = Parallel(n_jobs=N_JOBS_MAX)(\n            delayed(len)(self.bytes) for _ in range(N_FUNCTION_CALLS))\n\n    def setup(self, size):\n        self.bytes = os.urandom(size)", "param_names": ["size"], "version": "91a7e110dba2609e45b9ca2e91aeac815b67a41180c32c67b62946d4bd461d68", "type": "peakmemory", "timeout": 180, "pretty_name": "Parallel calls with bytes as inputs: peak memory usage", "unit": "bytes"}}, "machines": {"asv-runner": {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "machine": "asv-runner", "os": "Linux 3.13.0-116-generic", "ram": "501692", "arch": "x86_64", "version": 1}}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}