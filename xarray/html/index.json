{"revision_to_date": {"544": 1408046227000, "2058": 1507753091000, "2059": 1508356602000, "2063": 1508457170000, "2069": 1508517886000, "2075": 1508634256000, "2078": 1508694560000, "2082": 1508774288000, "2083": 1508777568000, "2094": 1508878389000, "2098": 1508889604000, "1082": 1434354993000, "2108": 1508906084000, "2110": 1508908149000, "2116": 1508954387000, "2121": 1508995170000, "2126": 1509086843000, "2134": 1509146270000, "2136": 1509147367000, "2138": 1509147826000, "2139": 1509150112000, "2140": 1509153842000, "2147": 1509298134000, "2150": 1509301145000, "2155": 1509377387000, "2156": 1509419749000, "2157": 1509419960000, "2158": 1509422608000, "2159": 1509423832000, "2160": 1509497321000, "2161": 1509845384000, "2162": 1509910952000, "2163": 1509988915000, "2164": 1510079504000, "2165": 1510087303000, "2166": 1510195617000, "2167": 1510214172000, "2168": 1510332385000, "2169": 1510462273000, "2170": 1510513870000, "2171": 1510520022000, "2172": 1510542815000, "2173": 1510543377000, "2174": 1510589246000, "2175": 1510630354000, "2176": 1510630877000, "2177": 1510630956000, "2178": 1510880090000, "2179": 1510937080000, "2180": 1511196903000, "2181": 1511197105000, "2753": 1554666907000, "2184": 1511956209000, "2185": 1511966599000, "2187": 1512353787000, "2188": 1512402782000, "2189": 1512610408000, "2190": 1512684557000, "2191": 1512790174000, "2192": 1513089532000, "2193": 1513217496000, "2194": 1513273383000, "2195": 1513322783000, "2196": 1513359098000, "2197": 1513575492000, "2198": 1513615859000, "2199": 1513732863000, "2200": 1513782856000, "2201": 1513838466000, "2202": 1514439616000, "2203": 1514614901000, "2204": 1514740576000, "2205": 1514986427000, "2206": 1514997475000, "2207": 1515004479000, "2208": 1515462492000, "2209": 1515568432000, "2210": 1515609466000, "2211": 1515640475000, "2212": 1515689588000, "2213": 1515689687000, "2214": 1515705882000, "2215": 1515962960000, "2216": 1516055129000, "2217": 1516338066000, "2218": 1516338830000, "2219": 1516352097000, "2220": 1516472941000, "2222": 1516491272000, "2223": 1516725207000, "2224": 1516727237000, "2225": 1516738528000, "2226": 1516781418000, "2227": 1516805751000, "2228": 1516902372000, "2229": 1516974653000, "2230": 1517293274000, "2231": 1517303948000, "2232": 1517465047000, "2233": 1517536906000, "2234": 1517598653000, "2235": 1517780630000, "2236": 1517864401000, "2237": 1517947143000, "2238": 1517992833000, "2239": 1518391278000, "2240": 1518469685000, "2241": 1518473532000, "2242": 1518546876000, "2243": 1518613907000, "2244": 1518732181000, "2245": 1518736830000, "2246": 1518736888000, "2247": 1518814977000, "2248": 1518815311000, "2249": 1518842415000, "1058": 1433178917000, "2265": 1519605657000, "2290": 1520957165000, "2296": 1521693415000, "2297": 1521845516000, "2298": 1522262277000, "2299": 1522262301000, "2300": 1522381494000, "2301": 1522458959000, "2302": 1522458974000, "2303": 1522716268000, "2304": 1522727944000, "2305": 1522810016000, "2306": 1523029008000, "2308": 1523393338000, "2309": 1523419009000, "2310": 1523482666000, "2311": 1523482730000, "2313": 1523576281000, "2314": 1523668912000, "2315": 1523669869000, "2316": 1523670038000, "2317": 1523840878000, "2318": 1523979573000, "2319": 1524225862000, "2320": 1524332526000, "2321": 1524757702000, "2322": 1525108646000, "2323": 1525108672000, "2324": 1525159439000, "2325": 1525222484000, "2326": 1525228261000, "2327": 1525298373000, "2328": 1525470659000, "2329": 1525746339000, "2330": 1525753382000, "2331": 1525879712000, "2332": 1525913140000, "2333": 1525974599000, "2340": 1526314143000, "2341": 1526325456000, "2342": 1526331870000, "2343": 1526331997000, "2344": 1526338401000, "2351": 1526519535000, "2353": 1526563007000, "2354": 1526576130000, "2355": 1526654890000, "2356": 1526671842000, "2357": 1526858042000, "2358": 1526889754000, "2359": 1527209526000, "1342": 1440190751000, "2372": 1527826903000, "2373": 1527830245000, "2374": 1527830452000, "2375": 1527831958000, "2376": 1527832317000, "2377": 1527869749000, "2378": 1527898225000, "2383": 1528421478000, "2384": 1528430933000, "2385": 1528432513000, "2386": 1528432687000, "2387": 1528869095000, "2388": 1529458763000, "2389": 1529511996000, "2390": 1529704805000, "2391": 1530248846000, "2392": 1530609386000, "2393": 1530723587000, "2394": 1530723712000, "2395": 1530724014000, "2396": 1530817276000, "2397": 1531011330000, "2402": 1531504793000, "2403": 1531585192000, "2411": 1531857687000, "2413": 1531928744000, "2414": 1531929179000, "2415": 1531929503000, "2416": 1531972229000, "2417": 1531979783000, "2418": 1532102690000, "2419": 1532363587000, "2420": 1532679642000, "2421": 1532735454000, "2422": 1532758074000, "2423": 1532758641000, "2424": 1532772349000, "2425": 1532795833000, "2426": 1532844580000, "2427": 1532948729000, "2428": 1533076123000, "2429": 1533149718000, "2430": 1533176282000, "2431": 1533512819000, "2432": 1533567435000, "2433": 1533595132000, "2434": 1533665134000, "2435": 1533690841000, "2436": 1533917369000, "2440": 1534218393000, "2441": 1534272261000, "2442": 1534292307000, "2443": 1534320688000, "2444": 1534374340000, "2445": 1534402772000, "2446": 1534727556000, "399": 1400620413000, "2448": 1534782675000, "2449": 1535419279000, "2450": 1535420939000, "2451": 1535479915000, "2452": 1535732598000, "2453": 1536075563000, "2454": 1536160642000, "2455": 1536160725000, "2456": 1536160746000, "2457": 1536205837000, "2458": 1536632057000, "2459": 1536642830000, "2460": 1537282056000, "2461": 1537319947000, "2462": 1537336767000, "2463": 1537388679000, "2464": 1537551380000, "2465": 1537560162000, "2466": 1537580510000, "2467": 1537581200000, "2468": 1537588880000, "2469": 1537647208000, "2470": 1537923332000, "2471": 1538004474000, "2472": 1538005647000, "2473": 1538066222000, "2474": 1538117669000, "2475": 1538142268000, "2476": 1538142294000, "2477": 1538159075000, "2478": 1538313408000, "2479": 1538491469000, "2480": 1538492725000, "2481": 1538495159000, "2482": 1538726537000, "2484": 1538812137000, "2485": 1538845753000, "2486": 1538939222000, "2487": 1538951476000, "2488": 1538951954000, "2489": 1538952007000, "2490": 1538976214000, "2491": 1539022621000, "2492": 1539058421000, "2493": 1539149163000, "2494": 1539179242000, "2495": 1539253704000, "2496": 1539292852000, "2497": 1539748856000, "2498": 1539795211000, "2499": 1540166463000, "2500": 1540221973000, "2501": 1540254170000, "2502": 1540274133000, "2503": 1540274386000, "2504": 1540282762000, "2505": 1540319327000, "2506": 1540481218000, "2507": 1540483612000, "2508": 1540502615000, "2509": 1540519472000, "2510": 1540565435000, "2511": 1540658092000, "2512": 1540687139000, "2513": 1540749377000, "2514": 1540861243000, "2515": 1540861267000, "2516": 1541005006000, "2517": 1541048665000, "2518": 1541133416000, "2519": 1541134743000, "2520": 1541280252000, "2521": 1541385327000, "2522": 1541392026000, "2523": 1541432176000, "2524": 1541436389000, "2525": 1541521365000, "2526": 1541521396000, "2527": 1541607235000, "2528": 1541607388000, "2529": 1541607621000, "2530": 1542160273000, "2531": 1542386402000, "1509": 1445447218000, "2538": 1543091157000, "2539": 1543091175000, "2540": 1543175996000, "2541": 1543257565000, "2542": 1543301214000, "2543": 1543433214000, "2544": 1543444236000, "2547": 1544513075000, "2548": 1544556510000, "2549": 1544556543000, "2550": 1544584409000, "2551": 1544634681000, "2552": 1544721157000, "2553": 1544721179000, "2554": 1544721356000, "2555": 1544808708000, "2559": 1544917998000, "2569": 1545083855000, "2570": 1545153695000, "2573": 1545191818000, "2574": 1545196378000, "2583": 1545239944000, "2584": 1545328898000, "2587": 1545519478000, "2588": 1545591772000, "2589": 1545595891000, "2590": 1545665846000, "2591": 1545667082000, "2592": 1545673819000, "2593": 1545700909000, "2594": 1545951509000, "2595": 1545981041000, "2596": 1546023889000, "2597": 1546128616000, "2598": 1546131635000, "2599": 1546135681000, "2600": 1546136847000, "2601": 1546300115000, "2602": 1546404723000, "2605": 1546478077000, "2606": 1546478285000, "2608": 1546480484000, "2609": 1546480484000, "2610": 1546480794000, "2611": 1546539013000, "2612": 1546622133000, "2613": 1546670794000, "2614": 1546715214000, "2615": 1546734717000, "2616": 1546736121000, "2617": 1546766025000, "2618": 1546932101000, "1595": 1453428094000, "2621": 1547168770000, "2622": 1547399238000, "2636": 1547551198000, "2637": 1547631351000, "2638": 1547730342000, "2640": 1547802990000, "2641": 1547848063000, "2642": 1547919919000, "2643": 1548113155000, "2644": 1548211799000, "2645": 1548260255000, "2646": 1548277781000, "2647": 1548292126000, "1629": 1455693104000, "2665": 1548434325000, "2670": 1548446107000, "2671": 1548453137000, "2672": 1548526489000, "2674": 1548526880000, "2675": 1548609107000, "2676": 1548622923000, "1657": 1457927709000, "635": 1411354495000, "1694": 1469764977000, "1701": 1470247715000, "1706": 1470442640000, "2737": 1552708924000, "2738": 1552709765000, "2739": 1552710493000, "2740": 1553057006000, "2741": 1553108878000, "2742": 1553217171000, "2743": 1553229444000, "2744": 1553461911000, "2745": 1553481000000, "2746": 1553481028000, "2747": 1553568107000, "2748": 1553915677000, "2749": 1554117508000, "2750": 1554415103000, "2751": 1554427886000, "2752": 1554428077000, "1729": 1471570611000, "706": 1414043606000, "2755": 1554852861000, "2756": 1554921709000, "2757": 1554982928000, "2758": 1554999852000, "2759": 1555028743000, "2760": 1555203118000, "1184": 1437087231000, "781": 1419407133000, "2106": 1508903237000, "2447": 1534727595000, "2754": 1554705750000, "477": 1404256085000, "1844": 1484108194000, "2619": 1546972439000, "310": 1399080726000, "1871": 1485412023000, "1876": 1485798145000, "870": 1424987642000, "887": 1425363016000, "1919": 1491201087000, "1933": 1492375395000, "1936": 1492451260000, "1937": 1492451568000, "923": 1426728691000, "1965": 1496985960000, "1983": 1499875010000, "1984": 1500049885000, "1985": 1500178366000, "1986": 1501004571000, "1988": 1501085853000, "1989": 1501185449000, "1990": 1501263544000, "2002": 1502097698000, "2003": 1502211630000, "2004": 1503504109000, "2005": 1503638677000, "2006": 1503941517000, "2007": 1504199930000, "2008": 1504200310000, "2009": 1504207048000, "2010": 1504279911000, "2011": 1504288721000, "2014": 1504591321000, "2015": 1504619455000, "2016": 1504633936000, "2017": 1504641346000, "2018": 1504656427000, "2019": 1504769926000, "2020": 1504814646000, "2021": 1504887142000, "2022": 1505175795000, "2023": 1505408661000, "2024": 1505409590000, "2025": 1505491204000, "2027": 1506027342000, "2028": 1506097655000, "2029": 1506300935000, "2030": 1506478257000, "2031": 1506554016000, "2033": 1507155016000, "2034": 1507158767000, "2035": 1507162357000, "2036": 1507221253000, "2037": 1507226387000, "2038": 1507255552000, "2040": 1507583730000, "2043": 1507591565000, "2046": 1507661218000, "2047": 1507668678000}, "revision_to_hash": {"544": "db6598a447ae686cdb08d95f3a788f7034b593a4", "2058": "2949558b75a65404a500a237ec54834fd6946d07", "2059": "4c3c3328a7ea8269e1411c5119dd0b3d4d972cc4", "2063": "9a0c744c8015345a6e892039d73eff40119bb66b", "2069": "b3387cb178a8ec79fad0252589b865ff3c21cee2", "2075": "8f5e932e47fe6a9301dd6dd2918594fd09e26f0a", "2078": "9763a66e0e4675e7adc3fff3830c62f0e31a2bb3", "2082": "2c83e5496f7cf9984c8eb70a88ef5d30d278c673", "2083": "423d3902ae432989a8a28bf9608621805d7095c5", "2094": "583b8e80bfe399144ab4f055ae15a04e58d65a2f", "2098": "881cb3c7bd0ad88a0c9c6e4d69a46c821954609f", "1082": "f986a69def5e882baf801b3d97a9121f80301d40", "2108": "3061db6c8e2b12216cb45dccbdb8a4c154486046", "2110": "f01d69802d9fd37d28817f77ad3cb9b6344268a3", "2116": "888b383b844fedae8b04095d0cb0d08066b19de9", "2121": "6229b902157cc607cfc40945b75df200701fc8a9", "2126": "120e039ddb80510b5fe8be9c20c10362b00c7261", "2134": "bc3e59df9e8f467da289209bb13f4f3bf0c54354", "2136": "63902306176da07cf3db52805f3a90a62e18ad46", "2138": "da7972c6bb8e381bb737af037edf19c687c93ed2", "2139": "1436509eee30bae1449f0d98ecf66c9fa3dc2572", "2140": "3a995294a99a00a62fb451c8dc3f0c404c8e92f5", "2147": "c58d1426401a1f7b6ad14a14a67afe25189e4ff3", "2150": "d016ea7d925d3d53796b7c68b6d377bdb7497a8e", "2155": "cbc0c92ebf5032ba315df576aaddcaf37185f90b", "2156": "20f9ffd86d2ca05c6fcf5285e40dd61c9788df49", "2157": "7e9193c0093e0accfbef2312db8fabf5fd4eaa8b", "2158": "692d252a6caa17b28c192c7573dd6c183de47686", "2159": "17956ea5de2cf5029992e8f83460fcc878e3d024", "2160": "f83361c76b6aa8cdba8923080bb6b98560cf3a96", "2161": "acae757d869af776a4b2bd980fb77a1873f4c510", "2162": "6b16e6eed3eb4b8e3f5c237315765cf4b94b8a2b", "2163": "2a1d3928a0aa0e66fe0a2211a6c9f1d079404dff", "2164": "10495be789d7362adb68a2133b440ffc6ca25e6e", "2165": "fb6e13ec15e85bbeceedbcd754e063f6e5696bf7", "2166": "089c9e01bf9827f9e4e1617a253d8a914b5c6656", "2167": "dbf7b01cb4a4d9fb00882e0457523e4bb806820c", "2168": "4caae2e4367047e2c6acce219ea20dc67b5a001a", "2169": "0818a3670521e7dc06b75b0a5241d2cf3f522cb2", "2170": "014b7898a65d9406a0e9af0ab7166702b6e977b3", "2171": "9cffe1f9157cd94b4d566ef546fb9d791dadfd3e", "2172": "f83ad9e6b6665935d69abf5df4d0619ea81c9e88", "2173": "bea202d682383e1ebb081ac9a596b1bb0c3c5056", "2174": "9d8ec381d961e76c13f08b5ef741e43a0ecc9a73", "2175": "ac854f081d4b57d292755d3aff1476f8e2e2da11", "2176": "872edbee4e82779b5fa1e7f3fcaec5cc84cd5748", "2177": "8267fdb1093bba3934a172cf71128470698279cd", "2178": "1a012080e0910f3295d0fc26806ae18885f56751", "2179": "6463504ae7c6fd0c2250237a2a74baf1b707723a", "2180": "6d64c58272f2b36b739fdaa3ff5b402135b036b7", "2181": "9d09c1659741dafb1fadeed49c81f9e90a548b07", "2753": "e7ec0870b15114b0443c28bf7e32d42717808c98", "2184": "8b08ad853b187aba9cd501704d065f9db7876e51", "2185": "4b8339b53f1b9dcd79f2a9060933713328a13b90", "2187": "57c15118f1f7e294c47ca925db414b3f104e2398", "2188": "c2b205f29467a4431baa80b5c07fe31bda67fbef", "2189": "3a28b611e40f2a09c05f982242f638cc3f7d94bf", "2190": "ea72303329c8e3cc88bae71a1f5bfe68079fed08", "2191": "5e801894886b2060efa8b28798780a91561a29fd", "2192": "89a1a9883c0c8409dad8dbcccf1ab73a3ea2cafc", "2193": "8fe7eb0fbcb7aaa90d894bcf32dc1408735e5d9d", "2194": "19fb75727c772a5e4a66bf2794d0282e81995ba5", "2195": "f882a583d08b478415088bfbd53bb9c67acc81b8", "2196": "cb161a1fbc9771d30ff4a7fc7e7b51a14122ab42", "2197": "49243646becbb571f80ca8ccb6ac3646fcfd9cbc", "2198": "a0ef2b7174d50a37b46dd7b0be153333d1a00e78", "2199": "76e9ed853a8d854d64bc14da2a0d50953786c4ed", "2200": "eeb109d9181c84dfb93356c5f14045d839ee64cb", "2201": "4a9c1e313037ccadd6d4b1251de8d8f943443270", "2202": "6eac8574f85623b18b59ba1ac9cf95e09c87980b", "2203": "783b527b8ed2a79fbb1439c9a87db144edc55cf7", "2204": "c368ee734945bbc736c33463ea561311bbdc1e9b", "2205": "30c849eed36f313db90a0f2e3eb8a135991240f6", "2206": "186a8bbe6a79e8d94203af113297c96a045b8730", "2207": "5a28b89d8f32a16d8529d6514c04992b5ee7a349", "2208": "ab0db05a58fd47fe895d1a85c09c37d96263d3b7", "2209": "b6300ea9d9e84e24fc2e03bdff06d8d0659e2344", "2210": "049cbdd240fe88ab1ed275e81dc9906c352e926f", "2211": "289f95a25c08796532807c669bbb5e12a79270c2", "2212": "50b0a69a7aa0fb7ac3afb28e7bd971cf08055f99", "2213": "5a6dea40164b5c47a78d62dce77a317b39ef2c9c", "2214": "502a988ad5b87b9f3aeec3033bf55c71272e1053", "2215": "0d69bf9dbf281f0f0f48ac2fadda61a82533aac3", "2216": "f3deb2f2495220af819021b199a5305b0d62ef36", "2217": "6aa225f5dae9cc997e232c11a63072923c8c0238", "2218": "f2ea7b604a4b912e836d0abd9c33ad94defd0c14", "2219": "74d8318c68be884134d449afad18dfe731d48b72", "2220": "3bd704a4815ad2281e61eedcee3c7935789d410b", "2222": "e31cf43e8d183c63474b2898a0776fda72abc82c", "2223": "3cd2337d8035a324cb38d6793eaf33818066f25c", "2224": "b55143d3a54d95f3d6a8356835bd27be369824da", "2225": "65e5f05938dc40c6e169377f8c0b6e7774d96866", "2226": "04974b99113d3f449c5592abc01a5701ba2382e4", "2227": "0a0593d78fad6c0b776d4c3c6b32a24b2bdfba35", "2228": "009291139fde0c859ee565141cdb3b6a3d28cba0", "2229": "015daca45bd7be32377bdf429c02117d5955452c", "2230": "e7e2778a4c6b2d41d98481b8cef94032eff9ebc2", "2231": "7b17b4f42abf90f7300a4865839fe6f6faae16ca", "2232": "55257b86fcfedba1c4be35183e55fa1f2de13667", "2233": "becd77c44d9436a142db4a98de2b30d388ee6d2b", "2234": "e9b98d032adf75509c430056c086389f5f3134fc", "2235": "23866d0447da2765a0d655138edeefa454d99af1", "2236": "7357a07806d2493c7cb2765f01d54ec9a8f2c87d", "2237": "518436576b1661bb04e95987abf7678749b3d634", "2238": "1d3239982db9778e89a48fe55b01d0a525673a7a", "2239": "cbf4921102e3dbb77b9ca774caa48eebc1b27fc2", "2240": "ee38ff07e8c48c8542742b3e42dd00dc41eb38f7", "2241": "93a4039f6c6eb765f5b2dc1ba286b263a931dac6", "2242": "33660b76057b7dc5b9c7dac77e286bb755b1d68e", "2243": "2aa5b8a5c094593569f5bd9ae220d1f2fc0ecda0", "2244": "b6a0d60e720f5a19d6e00b11fc7f3d485e52a80c", "2245": "174fe5d28b94147ecb0cb88d5301ca9479c6d7ad", "2246": "d191352b6c1e15a2b6105b4b76552fe974231396", "2247": "58bc0240b51addd051d97e92ef2e29a9de5b92b0", "2248": "8c5c549e842644b3b5acabf40a98d7fe7e33ad89", "2249": "e0621c7d66c13b486b1890f67a126caec2990da7", "1058": "66abe7fffd336494ea78118c8525cddcc8dca0f0", "2265": "7191859ec9a5a20bb179de9c233b79017e735773", "2290": "1481656a323323c38e9923f871d27ecadc26d6ae", "2296": "9261601f89c0d3cfc54db16718c82399d95266bd", "2297": "7c2c43ce6b1792e1193635ab9b64fd248266f632", "2298": "c4c683ff6bba9acc892c6ad73174550544276b09", "2299": "8e4231a28d8385e95c156f17ccfefeab537f63ed", "2300": "44cc50d32b33016f453f2278b74e00a3c0852d5e", "2301": "1b48ac87905676b18e947951b0cac23e70c7b40e", "2302": "c78469a63417d9b7da0d5662788f10fb82923ea3", "2303": "a90a7c5dd93a0e7b3d73bf8f272ae086acbff32d", "2304": "8c194b695f07adad43e7a3aa5c59f53b01131807", "2305": "a5f7d6ac60e8e5682e2be739dd520b7a3bbd0fc7", "2306": "6402391cf206fd04c12d44773fecd9b42ea0c246", "2308": "72b4e211712e92e139db8b5ba0e2c7a7354deae7", "2309": "9b76f219ec314dcb0c9a310c097a34f5c751fdd6", "2310": "e63e0e9766c68d7eef215da6f6d7b7dbaca4b652", "2311": "8f96db41c177933b184e78d66f7148f1d0947cd9", "2313": "a9d1f3a36229636f0d519eb36a8d4a7c91f6e1cd", "2314": "295dd20028b1607ad810eae947a20d8122d311c2", "2315": "4cbb7cbd86af1ccfe2b3b98f0e36a410f86d77ef", "2316": "3dc7cbe4ab189c2eb17b3d482b5e6ee5d266405e", "2317": "a0bdbfbe5e2333d150930807e3c31f33ab455d26", "2318": "68090bbfc6ce3ea72f8166375441d31f830de1ea", "2319": "093518207f4a3210ec692308da2b181a646115d6", "2320": "99b457ce5859bd949cfea4671db5150c7297843a", "2321": "c42cbe787d530db48575d73fe7a3910b0a0e4fd8", "2322": "3c8935e537e6ec05a83dbe372bfe45d88308d665", "2323": "d1e1440dc5d0bc9c341da20fde85b56f2a3c1b5b", "2324": "39b2a37207fc8e6c5199ba9386831ba7eb06d82b", "2325": "39bd2076e87090ef3130f55f472f3138abad3558", "2326": "0cc64a08c672e6361d05acea3fea9f34308b62ed", "2327": "b9f40cc1da9c45b3dd33a3434b69c3d8fce57138", "2328": "98373f0a1e38fee04e6d9737a1483b878f949f82", "2329": "c6977f18341e3872ba69360045ee3ef8212eb1bf", "2330": "aeae80b21ed659e14d4378a513f2351452eed460", "2331": "c046528522a6d4cf18c81a19aeae82f5f7d63d34", "2332": "70e2eb539d2fe33ee1b5efbd5d2476649dea898b", "2333": "6d8ac11ca0a785a6fe176eeca9b735c321a35527", "2340": "d1b669ec7a1e9a0b9296855f71de72c975ec78e5", "2341": "188141fe97a5effacf32f2508fd05b644c720e5d", "2342": "29d608af6694b37feac48cf369fa547d9fe2d00a", "2343": "218ad549a25fb30b836aabdfdda412450fdc9585", "2344": "f4ef34f00902a55f65b82c998d29a4ab8f5b6bf0", "2351": "5d7304ea49dc04d7ce0d11947437fb0ad1fbd001", "2353": "0a766b38de1d11f4c3110b267db72cb73e238d07", "2354": "7bab27cc637a60bff2b510d4f4a419c9754eeaa3", "2355": "ecb10e347bbe0f0e4bab8a358f406923e5468dcf", "2356": "c346d3b7bcdbd6073cf96fdeb0710467a284a611", "2357": "585b9a7913d98e26c28b4f1da599c1c6db551362", "2358": "48d55eea052fec204b843babdc81c258f3ed5ce1", "2359": "b48e0969670f17857a314b5a755b1a1bf7ee38df", "1342": "97b3d0bb781c9bb8b6c9d997f0cd379d12291176", "2372": "cf19528d6d2baf988ad34e024cae28361c9fd693", "2373": "ad47ced88c1c99fd961617943e02613b67c9cea9", "2374": "a3cf251cc04ed5731912171a6c2b63f8927e610e", "2375": "1c9b4b2e556b81f1e668ae7aa3aaea8aa91b7983", "2376": "16ef0cf508d99b4154f41004992e648eb6cd6eb9", "2377": "1c37d9ce526fecb9fdab2c82b3f46be06f55a128", "2378": "1e6984b247a08c5c98baa808dcc7552eb1c372a0", "2383": "98e6a4b84dd2cf4296a3e0aa9710bb79411354e4", "2384": "43c189806264e15cbcae9a37d6f22e2b3e609348", "2385": "bb581ca206c80eea80270ba508ec80ae0cd3941f", "2386": "6c3abedf906482111b06207b9016ea8493c42713", "2387": "66be9c5db7d86ea385c3a4cd4295bfce67e3f25b", "2388": "59ad782f29a0f4766bac7802be6650be61f018b8", "2389": "73b476e4db6631b2203954dd5b138cb650e4fb8c", "2390": "9491318e29b478234e6f96c3547d724504b4a1bb", "2391": "04a78d50a928f4af2efc4e1d19370c76d822dbb6", "2392": "5ddfb6dc07f9de08bf95232df4a35e95a85fd113", "2393": "a962956486153c644f982704e86ba35c171597aa", "2394": "4173f7bde816caf9a0248774fbcc7a5de13c0b9f", "2395": "63cc96484270dee83e92391e49ad76b8ef3b40b3", "2396": "448c3f1ae919f94a2b594eaeb91c6fd950eca43f", "2397": "1688a59803786a9d88eeb43aa4c935f7052d6a80", "2402": "64a7d1144c78eacbcd2401d0aa06e86f4047b0a7", "2403": "afee350789cacecc689c63fe580c98025e29d3db", "2411": "df63fce69b9cde68689362895ec394df75335313", "2413": "024aa098b1d385d806ad7e3b97bcd3a5033f2ae0", "2414": "c77e8b12c522853ba1df43057a66422a22a9b688", "2415": "b5a8d86bc174694bc48cc3ddd9966f131d26f7bf", "2416": "7cd3442fc61e94601c3bfb20377f4f795cde584d", "2417": "9ecd406347738f222e835ca719d5f4d46e6ebd1a", "2418": "b8a342ae845a7d734d391c4b597ee689ed9c6a72", "2419": "46732461d01fc1a2dd097599bb384b7306f1c0a5", "2420": "9802d618251eae88474f680999db4c23967c8f7a", "2421": "f537ba65e9e5ca49d2dc1d9af6284e5926e0fa32", "2422": "600b34587767e06fd2092f304f5e1aba63e28f68", "2423": "2fa9dded34e06104379ad1a12c6967913998889b", "2424": "ded0a684136540962bcc409e6272b1cebb5af30a", "2425": "f281945fcacbfc1dbaa48fb15546fae5317bdda8", "2426": "1ecb6e86cbd66ecb5cf3e4f74d1220722b0dc70e", "2427": "5d8670f6949fed60ab570075ae7dc67200f9ff51", "2428": "603911d203ffdfa10528e838c5d98164b95f6a08", "2429": "c86810b5ab3fc1cd47c1c0ed07e002b797b27eaf", "2430": "56381ef444c5e699443e8b4e08611060ad5c9507", "2431": "f217a7d8675062aff14f3dc6fb008af0cba8da49", "2432": "b6a5af3c16f71be18968f849e4db845e946d5d5c", "2433": "0b181226bbb1c26adfdd5d47d567fb78d0a450fa", "2434": "0a60a52521e41dce897e265ac549cbf88c670faa", "2435": "04458670782c0b6fdba7e7021055155b2a6f284a", "2436": "fe99a22ca7bcb1f854c22f5f6894d3c5d40774a6", "2440": "df4a4b145b68c11d50576c961cf33c09b5bb9905", "2441": "b87b684b36cf5adbe4dca208aed0c69c44fc44c4", "2442": "c27ca436321654a97e776aa0d055dfef357bc5a8", "2443": "cbb2aeb6492ad5364694396fb10e3b86abfe0aa6", "2444": "5155ef9ed2be7b3b201925c4902e8d633fec87a8", "2445": "0b9ab2d12ae866a27050724d94facae6e56f5927", "2446": "725bd57ffa64d7e391ceef2b056fa8122ec09e8d", "399": "f3bb6e9cfebaa95523326834cd8bc5283ba43d80", "2448": "69086b332c6c950587830b266df4e624c2106d89", "2449": "78c57bb5234b1446182755523fcaa58494eab640", "2450": "b2ff906b2893e06f1e47bbe97974b9fd569c9518", "2451": "ecee9a0fe01db13bce1e234519614aeed53a7f07", "2452": "e5ae4088f3512eb805b13ea138087350b8180d69", "2453": "a3ca579c3c6996a44440c7b0f5f68932b5a1c46d", "2454": "fc9ef81dbda163348316a9014bc44e7dae93a5ed", "2455": "795a7bf26b6b4a6558c13b64864c4b5e0ea79016", "2456": "73f5b02a42a4003815d2bfc91e658195f5050be1", "2457": "66a8f8dd7f5a2997ff614f3966d1951587915e7e", "2458": "59bf7a7c13d8b01fd9600cb76c82b35b465f5707", "2459": "4de8dbc3b1de461c0c9d3b002e55d60b46d2e6d2", "2460": "8385fec954612bade1cb947f7b72bbda37eb5652", "2461": "b679f4a9edb2437d11f28bf6516fc7aa8d673acb", "2462": "a0b5af5a1945ccac3704df0ff2acaf55f2db2de6", "2463": "5b87b6e2f159b827f739e12d4faae57a0b6f6178", "2464": "c1c576f75a2c4c2f8fad314c10588f45c5a5c573", "2465": "ab96954883200f764a0dd50870e4db240c119265", "2466": "93f58a60fdb6260f5d5a156c78dca0d956c75fe3", "2467": "c1ea99212bc3e26789090f6800d468ed7fdd1bb8", "2468": "4577ed891f9839722fd9e606e4f3bdb8e6acef4f", "2469": "04253f271c66a12366a82d357c2a889dd3eea42f", "2470": "1ec83a75c409c68683ac035dfee1c26f8cbc6695", "2471": "1857a7fc2ab3a472025ff5d69371feaf7e3c4d74", "2472": "96dde664eda26a76f934151dd10dc02f6cb0000b", "2473": "78058e2c1f39cbfae6eddb30e3b7d4a81b54ad8b", "2474": "638b251c622359b665208276a2cb23b0fbc5141b", "2475": "458cf51ce20e8d924b38b59c8fbc3bb10f39148e", "2476": "c2b09d697c741b5d6ddede0ba01076c0cb09cf19", "2477": "23d1cda3b7da5c73a5f561a5c953b50beaa2bfe6", "2478": "f9c4169150286fa1aac020ab965380ed21fe1148", "2479": "8fb57f7b9ff683225650a928b8d7d287d8954e79", "2480": "1e7a1d348d927bfa4fd4fba58a3f7600314746cf", "2481": "0f70a876759197388d32d6d9f0317f0fe63e0336", "2482": "3cef8d730d5bbd699a393fa15266064ebb9849e2", "2484": "4a7a103204989af7e2b6bc97a4109d81beebd34c", "2485": "bb87a9441d22b390e069d0fde58f297a054fd98a", "2486": "18313c49c7bb311286abd6620cff6c70e27ba688", "2487": "515324062cf6f182d20c1aad210e8627b0b4013f", "2488": "3d65f02de7c0328029dd6c580f42ebeb7381579f", "2489": "cf1e6c73d0366124485c1d767b89ac1cc301705b", "2490": "5f09deb96ac2041e2a2e5affcc8e693bea9a5d73", "2491": "5b4d160d9a714c2cc83ff5788e2d73af92129713", "2492": "289b377129b18e7dc6da8336e958a85be868acbe", "2493": "6840fc2c0e38d58ec788c988bffb1ce399f8827b", "2494": "7f20a20aa278d2bb056403d665c10e29968755cd", "2495": "81172ecaf0c8ffec9e688fe6482680475f2e12c2", "2496": "4bad455a801e91b329794895afa0040c868ff128", "2497": "7cab33a1335cc2cbeb93090145a7f6d4c25a1692", "2498": "9f4474d657193f1c7c9aac25bb2edf94755a8593", "2499": "dffbcb8b7a6745ddbb061d554c0475afb9122bf3", "2500": "671d936166414edc368cca8e33475369e2bb4d24", "2501": "4a5d88dba5fd50d48ab00ed2ebaee058287ab0bf", "2502": "f9f4903ad15f10e65e0fb8526712062a18d145cb", "2503": "6008dc43bbf3b161cf822142082398073aba9f9d", "2504": "5ebed791db006075701c16b2e8eb9566207f2548", "2505": "b8c4b7862c87223f32e13d7c454a8f275998f828", "2506": "d77db21071e6c2ec0267096d5313fcd349623446", "2507": "b2a377f8dd215a0e1d3cbab61e6ae930347f4063", "2508": "2a4691321a3c13baf0a5615f16740435621b153d", "2509": "5940100761478604080523ebb1291ecff90e779e", "2510": "b622c5e7da928524ef949d9e389f6c7f38644494", "2511": "2f0096cfab62523f26232bedf3debaba5f58d337", "2512": "c2a6902f090e063692c53e1dacd6c20e584d8e80", "2513": "a2583334f5c40f0c8023146dcf0a82ca65875f32", "2514": "3176d8a241ff2bcfaa93536a59497c637358b022", "2515": "6d55f99905d664ef73cb708cfe8c52c2c651e8dc", "2516": "17815b48817e69b6e5f202609d9a7568b12cdf7c", "2517": "656f8bd05e44880c21c1ad56a03cfd1b4d0f38ee", "2518": "cf798c5eb1b3c3d5f487420861cd4498f6614283", "2519": "f788084f6672e1325938ba2f6a0bd105aa412091", "2520": "848d491826a746711265b42a12fec12611fe539a", "2521": "38399cce9b97a7b48d56f66500469305ccc250f9", "2522": "421be442041e6dbaa47934cb223cb28dd2b37e53", "2523": "55f21deff4c2b42bd6ead4dbe26a1b123337913a", "2524": "70f3b1cb251798335099ccdcca27ac85c70e6449", "2525": "ee5983a9d1a7389007459b8fd58c1532dd95a71d", "2526": "eece515aaa1bd9ec78dffe47d8d839cd69515b56", "2527": "efde852a9fb94688360acafa6c488685d977e574", "2528": "bcb10b14d5c83375dca7a214f00a67c49f80049c", "2529": "575e97aef405c9b473508f5bc0e66332df4930f3", "2530": "f547ed0b379ef70a3bda5e77f66de95ec2332ddf", "2531": "70e9eb8fc834e4aeff42c221c04c9713eb465b8a", "1509": "07bb75a7f43afbaf880a5d49dfb643e209ce9d42", "2538": "57fdcc52471b42ffba3269407329c7bd6694c0c1", "2539": "9d572a5aa93aedc2cfdabcde575162cfb1372d41", "2540": "ecbf91fcb6b83bbd955b476367e1daff09e5631a", "2541": "a2a448dff8c053b1a3a137c64aedde520ac6de2a", "2542": "483b8a0a89ea4be862488e51af8a1b3bc7f40356", "2543": "22a5763e0cafd360011e222a7f3138434e4f6ba0", "2544": "0d6056e8816e3d367a64f36c7f1a5c4e1ce4ed4e", "2547": "53746c962701a864255f15e69e5ab5fec4cf908c", "2548": "5d8ef5f885f7dc1cff5a34ab0e0aec1b4c2e3798", "2549": "688150309c78eaf09e4ae8662ec615cac7ca843b", "2550": "23483adfce9cccae5d85ae3e9fa2ca6b721c6815", "2551": "82789bc6f72a76d69ace4bbabd00601e28e808da", "2552": "cbb32e16079ad56555ffa816cd880fb2ef803315", "2553": "2223445905705162053756323dfd6e6f4527b270", "2554": "9e8707d2041cfa038c31fc2284c1fe40bc3368e9", "2555": "09494eb0c4299bb2d923a00ef8f6def9af4a1adc", "2559": "f8cced75f718ca0ad278224cf4b09bd42f5cd999", "2569": "090564c6cb621ee4d938f424f6e5acdf313bbbc7", "2570": "a4c9ab5b5044801d2656e6e5527dcf21bd2dc356", "2573": "30288e8ab565bd87924c5bfd380820d9adc0b265", "2574": "778ffc49135d6f97e17b37b48304995fca72f1e0", "2583": "57348abb1f4d00a3015d0e7f7a5f0df3c6b59481", "2584": "a15587de419f8a47a875013813186a36fdc04c08", "2587": "ce52341f309fda97f7d0e8482511d1c59eacb833", "2588": "9352b3c382c3c90353f67ecfb9e7016b172c0955", "2589": "c2ce5ea83b5924302653c8dfba7de68c7d98c942", "2590": "b5059a538ee2efda4d753cc9a49f8c09cd026c19", "2591": "7fcb80f9865a7ade1b9c2f3d48bf0d31d6672bdb", "2592": "d8d87d21786a7823b84d8f1f1e14f793fbd5352a", "2593": "2667deb74a30dc3bd88752a3ce5da590cf7ddd48", "2594": "85ded913d030dda8eb1f3ed18db76b32a9f9ca2d", "2595": "bc5558e99a6323226fec5fb641281e86167b2e74", "2596": "a8e5002ab616e43f2e1b19a5963475a8275b0220", "2597": "1545b50a3c8841b3f62c7bd59353d55aa2389697", "2598": "250b19c8fff56c295f6047956400863db22cb48b", "2599": "d1d2ecec5febabceea9b724c26dd92180322c819", "2600": "e95f765b52166b7b52b58ecdf1fc3ad4d7e24f99", "2601": "11e6aac859a12a9ffda66bbf5963e545314257e0", "2602": "faacc8da000b7971233142be349ee39c6d088510", "2605": "c62c4fa0a3fff09dbf5e4cb842c1dc290a3ba412", "2606": "49731d438e261073ddd71269e829c77418e465e9", "2608": "624d78f48cfa54b8952219ecf37bcee4673da900", "2609": "cb5ef42d39fbd359b8a9800ca950bd0efad9035e", "2610": "a70b3c40979b16baaec3f58a97e11d6fa0353597", "2611": "28123bb99cebee7d6bad2a1acd674ca023f4ff8d", "2612": "06244df57cd910af4e85506fe067291888035155", "2613": "ee44478ed921ae3afdece9d16dc179a197727e8d", "2614": "85f88e7ac363c55b77375af93ebfc8c15b75c129", "2615": "a0bbea89d5ce1399a24ca6c27b446283588ca2b4", "2616": "dba299befbdf19b02612573b218bcc1e97d4e010", "2617": "ede3e0101bae2f45c3f4634a1e1ecb8e2ccd0258", "2618": "6963164dbdc55f86f34b741073838f083a68a152", "1595": "66057e60201ac5a2e4cd37913220f2ea42e6f06e", "2621": "d4c46829b283ab7e7b7db8b86dae77861ce68f3c", "2622": "44a8c97b1a1938992aa32a6f885e22251fcd36ce", "2636": "f13536c965d02bb2845da31e909899a90754b375", "2637": "5a96460dcba1bdfcedb3f2950628edca8a939e87", "2638": "dc87dea52351835af472d131f70a7f7603b3100e", "2640": "1d0a2bc4970d9e7337fe307f4519bd936f7d7d89", "2641": "385b36cdd34431b4f6f14aad1f222f989e7e2de2", "2642": "ec255eba7cce749c25e1d7b6f0a7fc537ff61841", "2643": "a7d55b9bcd0cc19330b5784842d51af5309d07ee", "2644": "1e67c230649a0ccb9525540d5420746d77629f4d", "2645": "e53f21ce6c9ad8c74b1f6cc9dd00d374688ca0fe", "2646": "ddacf405fb256714ce01e1c4c464f829e1cc5058", "2647": "79fa060dd6b567e8aa3606b8b8cc0c54d1b14acb", "1629": "a5410484068d6b038589b73aaddb65bb8205694d", "2665": "aabda43c54c6336dc62cc9ec3c2050c9c656cff6", "2670": "cc5015aabe0b08cdf05610ead9e7bfcbeee807c8", "2671": "2e99c7dde32e396dd2c5fc6261a2d06217621e10", "2672": "8ca8efe16698e08e6ac96c63e720c3a7efd248a7", "2674": "d58e0769c7d600d5c8c3c2fb52aa28856c4d3290", "2675": "882deac6a38078a64032f88d4785567fd9be8d56", "2676": "620b946b6f9ad922d919c68b0954d7ac13e65282", "1657": "b45e8d325861d624d0d3a940ba301758568f4c58", "635": "646cb5abbae8999e568d8e0e13f688bea11cca37", "1694": "9c6c536a9bf45c5acbf17e13e5caf4bf9a3df2cd", "1701": "eb09370228ca581e41317fe01f01875cde626bbc", "1706": "22dee70182074b967218c678e75809e1cf69ec14", "2737": "ad977c94eaaa1ad151bb46f2dad319566261c282", "2738": "0c9152c0413cd36df8f744a3b0e9c026d37d2b05", "2739": "a5ca64ac5988f0c9c9c6b741a5de16e81b90cad5", "2740": "55b8fe92473724ae03c93777e21fc7c36074188f", "2741": "164d20abb6ffc35eb3f314ce7fb5b9600cf9de3f", "2742": "8126d3e623667930b1df43c2d936a0ba52a6ca19", "2743": "742ed3984f437982057fd46ecfb0bce214563cb8", "2744": "948d98476524e3cf399ce6131dcfc44bf6eebb6e", "2745": "72e6208e59db14d0a707ae1fd401104da40d91b3", "2746": "89dddc1f5892178abf7375e14adfd5b729b71037", "2747": "16a2c03bb23757a92f3f9b8e74c4d489e892e6d6", "2748": "7d0e895fc27482256804303a16827feafc828595", "2749": "aaae999bfd4b90aaaf13fea7ac3279d26562ce70", "2750": "31619d711b952a30c8cfe56916c8720359835827", "2751": "aa6abb592ac2464170459ca96409398ec8b4593a", "2752": "23d54a890e6cfe1de420071b597c911164de4cb8", "1729": "1b92db4317a8576b6c27d64d2be10b5ddfd0f69f", "706": "76ee314bdc1c70907d3784f55b4b7ba2c7e572b2", "2755": "2c10d1443bea09e5ef53e5a7e35195a195e193a7", "2756": "3fb22cbf86e49be4a444fa062350bf7570abd6da", "2757": "b9a920e1a9012e88719cc96e8113bb877279c854", "2758": "a4305e76f697e9c44778b28d15cd2f9e29b590cd", "2759": "33540590915c31cd5af583412d155d7fa8ea8081", "2760": "fad6d624f0716657f903f5955f16422d97275407", "1184": "6de83e1919b51c4f57c17229480afb2e9b0b8a2c", "781": "e0994b454d9e3b177959002e5b73e368634b3c03", "2106": "685d243267d02885d48fefcf35a6e4ae821b22af", "2447": "8378d3af259d7d1907359fc087dd0a6ca7e5ef17", "2754": "3435b03de218f54a55eb72dff597bb47b0f407cb", "477": "50b2a1bb4baf5f70f58d28e40112a9c05a2812ef", "1844": "d42f3839683650616487ef0607b70ce9bf182210", "2619": "6795fd06a70b0e7e5b748e2ad8d17d980a5f6b8e", "310": "5877711c9ddd9405cdb9058d180b440cdc46481c", "1871": "8c709e3762a2d3c4b09d0fea3e9265503cf66ac5", "1876": "7f026a10cde4316b48ff4ee1bd0d0d4fe1bc6a0d", "870": "034bca19968abe07c6d22339203ac7ad940afdbd", "887": "f2fd776841fca3d025cb0b9926aa0298aa3dbbbd", "1919": "30a51aaa786e167a63e4fe9d15a80303597e7a61", "1933": "4d28821129eedd237f4ac89150e83b2dfc49f669", "1936": "d6284e8dc6be2d9c3670ee5799e5e63c38d30f67", "1937": "1b28edac0f779faad312cdb810c091244eb9acff", "923": "f7dc779756c2cf5a0d105d2d3963352a4ac20450", "1965": "c88e46a9d4c517e8f2b1b740b978b98ad188b895", "1983": "fafc4360aa8ab07ec5aeaf47dea012c01c0034a2", "1984": "726c6a3638ecf95889c541d84e892a106c2f2f92", "1985": "5d245b22e9500a7eb805193ba5c65bb5474a5ae1", "1986": "d275ad6df25457b53a594953f45b252d14260115", "1988": "96e6e8f7ad8dd493c9d15df2951999c6dd04e8c9", "1989": "dbf9307db5ce51ef9e59ccc78387ac7ceda6b1b8", "1990": "e3e6db5b1bf94fd78c5a1b9d872ea8dcb91a7b9c", "2002": "4ebc8ab4d79219f8120dbc501eca75d16f9df471", "2003": "f9464fd74d49b2d89bf973a810b7e78720304989", "2004": "8e541deca2e20efe080aa1bca566d9966ea2f244", "2005": "bcd608101133c0cb84c74d341d22edef71ef4818", "2006": "174bad061dc5ac37a4b5e849ad2afa957127745f", "2007": "b190501a011f3427ae6a3220d72a8d972cb7c203", "2008": "0b2424a1813bf1af712780c360a94a5588523adf", "2009": "4571d60859850ec121fbaae04d717754f5a35dd1", "2010": "4a15cfa6f3e680af6969f3e2c6a375e2cc8c3288", "2011": "78ca20a6ea1a42eb637ae2ef09189f481cfda9a2", "2014": "25455b341b3bf0a85dd7c4fc383cbee4182d6d54", "2015": "d11a4b1063d492b431952507836f2c991b59e8db", "2016": "9a8e2c58ac4f953b3763d55e840fea595d626dfa", "2017": "5472fb585b9bfda7b0ce5b54d0182d608199df35", "2018": "216bb6720dbe22b67fc6194f4f9525ae0f8924e2", "2019": "98a05f11c6f38489c82e86c9e9df796e7fb65fd2", "2020": "3a81942eb0cc38129208a52c391f7150af6f2538", "2021": "a993317be46e6cba96424faa9fbcc54d3753d571", "2022": "fa6a7bee082332108d49fbbf452d04f8e7285172", "2023": "0c02f718090ef4bcf335ca53339bebd53e1d57d4", "2024": "ae4df1d8304ccd1eebec2c50e66f1671c1682ef8", "2025": "3fb5cbbeabef9d1df538ffa11cb01e6c09ea17a4", "2027": "7611ed9b678c4004855856d2ec6dc6eb7ac59123", "2028": "dc7d733bcc10ce935304d65d03124471661243a3", "2029": "3a91442afe2a805b6aea5a3b9be3f72eb7245354", "2030": "25d1855e737444c156f50d1f37a67d9674a8bac5", "2031": "24643ecee2eab04d0f84c41715d753e829f448e6", "2033": "41f48281ece7b0babd571ad1a8588b601779d928", "2034": "e7136689751059619fe3aa07cd6f1469fd4a0ad4", "2035": "c748062ef4353f5e249553b06a198a44c71083c4", "2036": "8710e0872533ccb82ac9716c24aa6e91f24113d0", "2037": "30160bae2a74d146627e00ccbc1e0152821b37b7", "2038": "5bd40151fd92e4342c43ba7cd6039e63e1611812", "2040": "14b5f1ca84b41696b7e8e3ec5e07d8064acc9a55", "2043": "b46fcd656391d786b8d25b0615f6d4bd30b524b7", "2046": "57ccf4250542e07409f8528b67fa487a0fe84552", "2047": "27132fba1e465955e76ed155ba6cbb769c0904df"}, "show_commit_url": "https://github.com/pydata/xarray/commit/", "tags": {"v0.9.0": 1871, "v0.11.2": 2608, "v0.10.9": 2466, "v0.10.2": 2290, "v0.10.5": 2373, "v0.8.1": 1706, "v0.10.0rc2": 2176, "v0.9.2": 1919, "v0.12.0": 2737, "v0.11.1": 2599, "v0.1": 310, "v0.6.1": 1509, "v0.11.0": 2528, "v0.8.2": 1729, "v0.4.1": 923, "v0.3.1": 706, "v0.12.1": 2751, "v0.2": 544, "v0.1.1": 399, "v0.9.6": 1965, "v0.6.0": 1342, "v0.4": 887, "v0.9.3": 1933, "v0.8.0rc1": 1694, "v0.9.0rc1": 1844, "v0.10.8": 2413, "v0.9.1": 1876, "v0.10.7": 2385, "v0.3": 635, "v0.8.0": 1701, "v0.7.2": 1657, "v0.10.4": 2351, "v0.3.2": 781, "v0.10.0": 2180, "v0.10.0rc1": 2158, "v0.10.3": 2315, "v0.7.1": 1629, "v0.5.2": 1184, "v0.2.0alpha": 477, "v0.5.1": 1082, "v0.10.1": 2265, "v0.5": 1058, "v0.11.3": 2674, "v0.10.6": 2375, "v0.9.5": 1937, "v0.7.0": 1595, "v0.4rc1": 870, "v0.9.4": 1936}, "params": {"cpu": ["Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz"], "scipy": [""], "numpy": [""], "dask": ["", null], "bottleneck": ["", null], "machine": ["asv-runner"], "ram": ["501692"], "distributed": ["", null], "branch": ["master"], "os": ["Linux 3.13.0-116-generic"], "pandas": [""], "arch": ["x86_64"], "netcdf4": [""], "python": ["2.7", "3.6"]}, "project": "xarray", "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]], "hash_length": 8, "project_url": "http://xarray.pydata.org/", "machines": {"asv-runner": {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "version": 1, "arch": "x86_64", "machine": "asv-runner", "ram": "501692"}}, "graph_param_list": [{"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": "", "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": "", "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": "", "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": null, "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": "", "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "os": "Linux 3.13.0-116-generic", "numpy": "", "dask": "", "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": "", "branch": "master", "scipy": "", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": "", "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": null, "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "3.6"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": null, "bottleneck": null, "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}, {"cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "scipy": "", "numpy": "", "dask": null, "bottleneck": "", "machine": "asv-runner", "ram": "501692", "distributed": null, "branch": "master", "os": "Linux 3.13.0-116-generic", "pandas": "", "arch": "x86_64", "netcdf4": "", "python": "2.7"}], "benchmarks": {"unstacking.UnstackingDask.time_unstack_fast": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "unstacking.UnstackingDask.time_unstack_fast", "unit": "seconds", "version": "b4fea11527d15bd0cdf53383cff4aa5ae54771de3971726eede632d69ba55315", "repeat": 0, "code": "class Unstacking:\n    def time_unstack_fast(self):\n        self.ds.unstack('flat_dim')\n\nclass UnstackingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(UnstackingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'flat_dim': 50})", "warmup_time": -1}, "interp.Interpolation.time_interpolation_2d": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'linear'", "'nearest'"]], "type": "time", "param_names": ["method"], "name": "interp.Interpolation.time_interpolation_2d", "unit": "seconds", "version": "02497db8a47581e21c1fe3fe9dc5077c31ee8c4a71904020cac63d2862098427", "repeat": 0, "code": "class Interpolation:\n    @parameterized(['method'],\n                   (['linear', 'nearest']))\n    def time_interpolation_2d(self, method):\n        self.ds.interp(x=new_x_long, y=new_y_long, method=method).load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3.time_open_dataset_scipy": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3.time_open_dataset_scipy", "unit": "seconds", "version": "bc4241687ba0577be1bb4b6a3b07a6218126f3f424e373acf309b40f8c818657", "repeat": 1, "code": "class IOReadMultipleNetCDF3:\n    def time_open_dataset_scipy(self):\n        xr.open_mfdataset(self.filenames_list, engine='scipy')\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "reindexing.ReindexDask.time_1d_fine_all_found": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_1d_fine_all_found", "unit": "seconds", "version": "18434ac425142884c95bf4a1ca9871c2ad8be519905c0f6aa49cf6cd80f18f24", "repeat": 0, "code": "class Reindex:\n    def time_1d_fine_all_found(self):\n        self.ds.reindex(time=np.arange(0, 1000, 0.5), method='nearest').load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "c74aa1f6acb32783f921519cdc5eedc73780db5b7d473e7b180ae45a3e6bee5e", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.block_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3.time_load_dataset_scipy": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3.time_load_dataset_scipy", "unit": "seconds", "version": "9e39c93fb2244b5f6520f66e8f2afa66d81b14495346d22c08636c832995b324", "repeat": 1, "code": "class IOReadMultipleNetCDF3:\n    def time_load_dataset_scipy(self):\n        xr.open_mfdataset(self.filenames_list, engine='scipy').load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "rolling.RollingDask.time_rolling_np": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["20", "40"], ["5", "None"]], "type": "time", "param_names": ["window_", "min_periods"], "name": "rolling.RollingDask.time_rolling_np", "unit": "seconds", "version": "674cc4fc656e0f3d1efea8f55d30ab879c27c1dc01a5c3cbb1907893a6908bb2", "repeat": 0, "code": "class Rolling:\n    @parameterized(['window_', 'min_periods'],\n                   ([20, 40], [5, None]))\n    def time_rolling_np(self, window_, min_periods):\n        self.ds.rolling(x=window_, center=False,\n                        min_periods=min_periods).reduce(\n                            getattr(np, 'nanmean')).load()\n\nclass RollingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(RollingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})\n        self.da_long = self.da_long.chunk({'x': 10000})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "83ae830b41bd61e67b7558d1322fb1358e838efee81095ee445256f9b2cd8662", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks(self):\n        xr.open_dataset(self.filepath, engine='netcdf4',\n                        chunks=self.block_chunks).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "rolling.Rolling.time_rolling_long": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'mean'", "'count'"], ["True", "False"]], "type": "time", "param_names": ["func", "pandas"], "name": "rolling.Rolling.time_rolling_long", "unit": "seconds", "version": "44444750ae0c15343562c123bd6eae108155fbfd5df14086ed416eedd87fae04", "repeat": 0, "code": "class Rolling:\n    @parameterized(['func', 'pandas'],\n                   (['mean', 'count'], [True, False]))\n    def time_rolling_long(self, func, pandas):\n        if pandas:\n            se = self.da_long.to_series()\n            getattr(se.rolling(window=window), func)()\n        else:\n            getattr(self.da_long.rolling(x=window), func)().load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})\n        self.da_long = xr.DataArray(randn_long, dims='x',\n                                    coords={'x': np.arange(long_nx) * 0.1})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_scipy_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_scipy_with_block_chunks", "unit": "seconds", "version": "d15d3a8df151f2eb128d7aae33c64adc5f2b3ab891233ff35d566c9757979254", "repeat": 1, "code": "class IOReadMultipleNetCDF3Dask:\n    def time_open_dataset_scipy_with_block_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='scipy',\n                              chunks=self.block_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "rolling.RollingDask.time_rolling_long": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'mean'", "'count'"], ["True", "False"]], "type": "time", "param_names": ["func", "pandas"], "name": "rolling.RollingDask.time_rolling_long", "unit": "seconds", "version": "5e9fa245934717b017be0421b26679cde08944b703250710729c9632f4a9e088", "repeat": 0, "code": "class Rolling:\n    @parameterized(['func', 'pandas'],\n                   (['mean', 'count'], [True, False]))\n    def time_rolling_long(self, func, pandas):\n        if pandas:\n            se = self.da_long.to_series()\n            getattr(se.rolling(window=window), func)()\n        else:\n            getattr(self.da_long.rolling(x=window), func)().load()\n\nclass RollingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(RollingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})\n        self.da_long = self.da_long.chunk({'x': 10000})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3.time_load_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3.time_load_dataset_netcdf4", "unit": "seconds", "version": "7f985b2925eb2d274470263c9c22d75b2e203c956dc278c381ed7735a8026130", "repeat": 1, "code": "class IOReadMultipleNetCDF4:\n    def time_load_dataset_netcdf4(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4').load()\n\nclass IOReadMultipleNetCDF3:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "15f75ac738d020b34f6aa9c7b91c918ab69913b7d289434089aed762dc1e5765", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='netcdf4',\n                            chunks=self.time_chunks).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "331e4f25849fef08a1b3c1701e9d38584c4cf73e7e3e42ccd319a5ab5e5a5f4c", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='netcdf4',\n                            chunks=self.block_chunks).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "unstacking.Unstacking.time_unstack_slow": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "unstacking.Unstacking.time_unstack_slow", "unit": "seconds", "version": "2cb2a607693584bdcf3de304fc3cda4ce0ba96b12634f255e9d11325464cbda7", "repeat": 0, "code": "class Unstacking:\n    def time_unstack_slow(self):\n        self.ds[:, ::-1].unstack('flat_dim')\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1, 1000, 500)\n        self.ds = xr.DataArray(data).stack(flat_dim=['dim_1', 'dim_2'])", "warmup_time": -1}, "interp.InterpolationDask.time_interpolation": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'linear'", "'cubic'"], ["True", "False"]], "type": "time", "param_names": ["method", "is_short"], "name": "interp.InterpolationDask.time_interpolation", "unit": "seconds", "version": "8c04837c3366d6fa7ba28f4c3b3ad75b05c3179acff4bfa12019f944724d3f7a", "repeat": 0, "code": "class Interpolation:\n    @parameterized(['method', 'is_short'],\n                   (['linear', 'cubic'], [True, False]))\n    def time_interpolation(self, method, is_short):\n        new_x = new_x_short if is_short else new_x_long\n        self.ds.interp(x=new_x, method=method).load()\n\nclass InterpolationDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(InterpolationDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'t': 50})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "185176f78cb442f2fa32c7f216ca65bd68569d6ecfa23fabcbff02e556f189f3", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.time_chunks).load()\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "7c0621350a181d48c97c566c943940ffe13d0cb0b49eef27570056a6714c3399", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "unstacking.Unstacking.time_unstack_fast": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "unstacking.Unstacking.time_unstack_fast", "unit": "seconds", "version": "3b7cd5dc8a4438a53166a0ced4c8e2871c3fb0e698c9ad89747c08f980c9b420", "repeat": 0, "code": "class Unstacking:\n    def time_unstack_fast(self):\n        self.ds.unstack('flat_dim')\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1, 1000, 500)\n        self.ds = xr.DataArray(data).stack(flat_dim=['dim_1', 'dim_2'])", "warmup_time": -1}, "reindexing.Reindex.time_1d_fine_all_found": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_1d_fine_all_found", "unit": "seconds", "version": "9eacebd38016efc77e0003598ce5fc7a38946b3c7d25ee25886bd64a0f457ca3", "repeat": 0, "code": "class Reindex:\n    def time_1d_fine_all_found(self):\n        self.ds.reindex(time=np.arange(0, 1000, 0.5), method='nearest').load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "reindexing.ReindexDask.time_2d_fine_some_missing": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_2d_fine_some_missing", "unit": "seconds", "version": "e5fc48ae14ddf5cbc4269a99d7d6f66af088aadfaa4af0ed93725b6d7d76704c", "repeat": 0, "code": "class Reindex:\n    def time_2d_fine_some_missing(self):\n        self.ds.reindex(x=np.arange(0, 100, 0.5), y=np.arange(0, 100, 0.5),\n                        method='nearest', tolerance=0.1).load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_time_chunks", "unit": "seconds", "version": "aa41d43fb0993c5e4b8847b45c963111239ffaf47152a6f1e100f76e0a7a9da2", "repeat": 1, "code": "class IOReadSingleNetCDF3Dask:\n    def time_load_dataset_scipy_with_time_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='scipy',\n                            chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "indexing.Assignment.time_assignment_basic": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1slice'", "'1slice-1scalar'", "'2slicess-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.Assignment.time_assignment_basic", "unit": "seconds", "version": "b4ea886a637fdde4090aacf2567b98150caf04902c334f65d359583282991750", "repeat": 0, "code": "class Assignment:\n    def time_assignment_basic(self, key):\n        ind = basic_indexes[key]\n        val = basic_assignment_values[key]\n        self.ds['var1'][ind.get('x', slice(None)),\n                        ind.get('y', slice(None))] = val\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "beee66cf8399304fe9e4c59a087904cbf8ed4c68090641aba86904d995348255", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.time_chunks).load()\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOWriteMultipleNetCDF3.time_write_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteMultipleNetCDF3.time_write_dataset_netcdf4", "unit": "seconds", "version": "ec9816feee61e0b8e46ac15cbf3abfb986f3000ad2a6855bb5a643a34fb6f31a", "repeat": 1, "code": "class IOWriteMultipleNetCDF3:\n    def time_write_dataset_netcdf4(self):\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          engine='netcdf4',\n                          format=self.format)\n\n    def setup(self):\n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'", "warmup_time": -1}, "rolling.RollingDask.time_rolling_construct": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["True", "False"], ["1", "200"]], "type": "time", "param_names": ["center", "stride"], "name": "rolling.RollingDask.time_rolling_construct", "unit": "seconds", "version": "d388194e3049d253321906c57bd74286a5121a780d12560c3337b9e57d3380b4", "repeat": 0, "code": "class Rolling:\n    @parameterized(['center', 'stride'],\n                   ([True, False], [1, 200]))\n    def time_rolling_construct(self, center, stride):\n        self.ds.rolling(x=window, center=center).construct(\n            'window_dim', stride=stride).mean(dim='window_dim').load()\n\nclass RollingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(RollingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})\n        self.da_long = self.da_long.chunk({'x': 10000})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "195dcee1997895e86e2a143f844f8b9370ea2a9cd29ad47513af8c2d0c0edc4c", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_block_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.block_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "rolling.Rolling.time_rolling_construct": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["True", "False"], ["1", "200"]], "type": "time", "param_names": ["center", "stride"], "name": "rolling.Rolling.time_rolling_construct", "unit": "seconds", "version": "8bf673497c345832752f89df4dc84fc23d9b1571bbff95b52d9c559cdae9c299", "repeat": 0, "code": "class Rolling:\n    @parameterized(['center', 'stride'],\n                   ([True, False], [1, 200]))\n    def time_rolling_construct(self, center, stride):\n        self.ds.rolling(x=window, center=center).construct(\n            'window_dim', stride=stride).mean(dim='window_dim').load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})\n        self.da_long = xr.DataArray(randn_long, dims='x',\n                                    coords={'x': np.arange(long_nx) * 0.1})", "warmup_time": -1}, "dataset_io.IOWriteMultipleNetCDF3.time_write_dataset_scipy": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteMultipleNetCDF3.time_write_dataset_scipy", "unit": "seconds", "version": "adf1d0b68bc4e9d7669b6312f5744bbe6f9d0bd71e17cbc884fdab539dde039d", "repeat": 1, "code": "class IOWriteMultipleNetCDF3:\n    def time_write_dataset_scipy(self):\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          engine='scipy',\n                          format=self.format)\n\n    def setup(self):\n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'", "warmup_time": -1}, "reindexing.Reindex.time_2d_coarse": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_2d_coarse", "unit": "seconds", "version": "149e1af52e95d09540a01d4315a84fab7d68ed593f81c1e1c64075cdb13fdabd", "repeat": 0, "code": "class Reindex:\n    def time_2d_coarse(self):\n        self.ds.reindex(x=np.arange(0, 100, 2), y=np.arange(0, 100, 2)).load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_oindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_oindexing", "unit": "seconds", "version": "da1fae6bc647d56e4a661830ae684a2f11c59542c63e7914c277acf2472b8011", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_oindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.oinds).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_oindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_oindexing", "unit": "seconds", "version": "a929a076188601cf9093fb1c54dd6c6629bb0c7139490b0b21da4f38b73b80a4", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_oindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.oinds).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4.time_orthogonal_indexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4.time_orthogonal_indexing", "unit": "seconds", "version": "37a7412ab8be9f65921fa51612a3bdd8ab95f1e25b5b37e6baa7c98f6a1a039f", "repeat": 1, "code": "class IOReadSingleNetCDF4:\n    def time_orthogonal_indexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4')\n        ds = ds.isel(**self.oinds).load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "36e783222800e51441eb17aeff055c5fdcb7fa8a20a43755fc3d98e1449b42e8", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.time_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "indexing.Indexing.time_indexing_basic": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1slice'", "'1slice-1scalar'", "'2slicess-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.Indexing.time_indexing_basic", "unit": "seconds", "version": "a66576470f0d6b030f4b9a0055094ed0325c4786636912a3528c5bcd553c10f5", "repeat": 0, "code": "class Indexing:\n    def time_indexing_basic(self, key):\n        self.ds.isel(**basic_indexes[key]).load()\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "6a9c75db3532c5b84fd36860281000450f20b00aa5a3ae5febf8307427ac686e", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks(self):\n        xr.open_dataset(self.filepath, engine='netcdf4',\n                        chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "reindexing.ReindexDask.time_2d_coarse": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_2d_coarse", "unit": "seconds", "version": "b6b3d862c84033930c8b465a8c9a0bde1957264ffbcc2b8c606e52cce8716591", "repeat": 0, "code": "class Reindex:\n    def time_2d_coarse(self):\n        self.ds.reindex(x=np.arange(0, 100, 2), y=np.arange(0, 100, 2)).load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4.time_load_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4.time_load_dataset_netcdf4", "unit": "seconds", "version": "b8d5b82537305839e6d58fdef503028aa0b4f020f0068319e890cedabdc43a56", "repeat": 1, "code": "class IOReadSingleNetCDF4:\n    def time_load_dataset_netcdf4(self):\n        xr.open_dataset(self.filepath, engine='netcdf4').load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks", "unit": "seconds", "version": "4bae023ed5fa6fc230373aa58b87c437ce52a763fc8c9c216ff6da8b759033cd", "repeat": 1, "code": "class IOReadSingleNetCDF3Dask:\n    def time_load_dataset_scipy_with_block_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='scipy',\n                            chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "fb22d09a028a9ab3411e4dbb31b5c347658f49ca0fc3831b3ef257e6502e77eb", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='netcdf4',\n                            chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOWriteNetCDFDaskDistributed.time_write": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteNetCDFDaskDistributed.time_write", "unit": "seconds", "version": "a3722a44dc2f48765e77dcae715c088db873fbfa6e340d8982fc02323f4b29c3", "repeat": 0, "code": "class IOWriteNetCDFDaskDistributed:\n    def time_write(self):\n        self.write.compute()\n\n    def setup(self):\n        try:\n            import distributed\n        except ImportError:\n            raise NotImplementedError\n        self.client = distributed.Client()\n        self.write = create_delayed_write()", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks_vindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks_vindexing", "unit": "seconds", "version": "7eeb36d6c8aa837a9f7887c5bb6989ecd5674702bf4006871e131a11976c4d48", "repeat": 1, "code": "class IOReadSingleNetCDF3Dask:\n    def time_load_dataset_scipy_with_block_chunks_vindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='scipy',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.vinds).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "indexing.IndexingDask.time_indexing_outer": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1d'", "'2d'", "'2d-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.IndexingDask.time_indexing_outer", "unit": "seconds", "version": "e70b43f8ac510cc275529557ff1042febf04c89b2f07179f710e92cce514480b", "repeat": 0, "code": "class Indexing:\n    def time_indexing_outer(self, key):\n        self.ds.isel(**outer_indexes[key]).load()\n\nclass IndexingDask:\n    def setup(self, key):\n        requires_dask()\n        super(IndexingDask, self).setup(key)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})", "warmup_time": -1}, "reindexing.ReindexDask.time_1d_coarse": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_1d_coarse", "unit": "seconds", "version": "5f6e452346ade3479d00e0faac494542d7a94fbb8d54a7f2e8b4c2ef0521f66a", "repeat": 0, "code": "class Reindex:\n    def time_1d_coarse(self):\n        self.ds.reindex(time=np.arange(0, 1000, 5)).load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3.time_orthogonal_indexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3.time_orthogonal_indexing", "unit": "seconds", "version": "7a519800a73f30004aba0049a18b63d5f1d89c041f9f2322c91831e7b8d4d622", "repeat": 1, "code": "class IOReadSingleNetCDF3:\n    def time_orthogonal_indexing(self):\n        ds = xr.open_dataset(self.filepath, engine='scipy')\n        ds = ds.isel(**self.oinds).load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "indexing.Indexing.time_indexing_vectorized": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1-1d'", "'2-1d'", "'3-2d'"]], "type": "time", "param_names": ["key"], "name": "indexing.Indexing.time_indexing_vectorized", "unit": "seconds", "version": "647732ba05d4ac1f93fe2ed29f833d844e93111d1fbab9741f8c573ed59ef453", "repeat": 0, "code": "class Indexing:\n    def time_indexing_vectorized(self, key):\n        self.ds.isel(**vectorized_indexes[key]).load()\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "f7512432c170774e9388f654b451e406e3b522ed5f546343cb9aa941d71f71a1", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_block_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.block_chunks)\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "interp.Interpolation.time_interpolation": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'linear'", "'cubic'"], ["True", "False"]], "type": "time", "param_names": ["method", "is_short"], "name": "interp.Interpolation.time_interpolation", "unit": "seconds", "version": "6914d7da24715b564b918d95b38735ef3ae2a1a21ca5da618e712f2d8e0b2045", "repeat": 0, "code": "class Interpolation:\n    @parameterized(['method', 'is_short'],\n                   (['linear', 'cubic'], [True, False]))\n    def time_interpolation(self, method, is_short):\n        new_x = new_x_short if is_short else new_x_long\n        self.ds.interp(x=new_x, method=method).load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4.time_vectorized_indexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4.time_vectorized_indexing", "unit": "seconds", "version": "1d88f65d6df6eb9af37e5f2c5bc4160c9224c60aa8cfba5e9c284237d7c56f39", "repeat": 1, "code": "class IOReadSingleNetCDF4:\n    def time_vectorized_indexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4')\n        ds = ds.isel(**self.vinds).load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "228a5c15799262379c8ed701e6aead1540542b389ca5004665e3c7bdf2172242", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks(self):\n        xr.open_dataset(self.filepath, engine='netcdf4',\n                        chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_scipy_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_scipy_with_time_chunks", "unit": "seconds", "version": "5504b40a0164052b62bd976cdf5ec85cf0e8697dac85e8a5930208da69b0e96e", "repeat": 1, "code": "class IOReadMultipleNetCDF3Dask:\n    def time_open_dataset_scipy_with_time_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='scipy',\n                              chunks=self.time_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOWriteSingleNetCDF3.time_write_dataset_scipy": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteSingleNetCDF3.time_write_dataset_scipy", "unit": "seconds", "version": "ae12e0e2b2c5e64044d6ed392a121855bceb389fe062bfa69f6de06288d20b6c", "repeat": 1, "code": "class IOWriteSingleNetCDF3:\n    def time_write_dataset_scipy(self):\n        self.ds.to_netcdf('test_scipy_write.nc', engine='scipy',\n                          format=self.format)\n\n    def setup(self):\n        self.format = 'NETCDF3_64BIT'\n        self.make_ds()", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "39e82ed087f39ea8e4beab874836f2f3e37beafc58df4afa6286ddf7570e3eb1", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3.time_open_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3.time_open_dataset_netcdf4", "unit": "seconds", "version": "2a4c322c0cdc73115ad41e6098716c7ac45a2aca1fedd12be31b10c309075795", "repeat": 1, "code": "class IOReadMultipleNetCDF4:\n    def time_open_dataset_netcdf4(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4')\n\nclass IOReadMultipleNetCDF3:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks_oindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks_oindexing", "unit": "seconds", "version": "9527115dc18a09294c09ab9eadbb6f8f9aafdb0ceb9b06069446cd209768e196", "repeat": 1, "code": "class IOReadSingleNetCDF3Dask:\n    def time_load_dataset_scipy_with_block_chunks_oindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='scipy',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.oinds).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4.time_open_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4.time_open_dataset_netcdf4", "unit": "seconds", "version": "23c6487e8a68b14f8ce3076854ae05578be265d041f5dc0afa092335b29da484", "repeat": 1, "code": "class IOReadMultipleNetCDF4:\n    def time_open_dataset_netcdf4(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4')\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3.time_load_dataset_scipy": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3.time_load_dataset_scipy", "unit": "seconds", "version": "b22e0dc0f13c635cf42abef76ec42df081f85048df681fc0b68cd79596fba127", "repeat": 1, "code": "class IOReadSingleNetCDF3:\n    def time_load_dataset_scipy(self):\n        xr.open_dataset(self.filepath, engine='scipy').load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_vindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_vindexing", "unit": "seconds", "version": "1dbff00386a3ac5f237d06bc25db67d5253420ef9e3866eec1d8b18ca71498d9", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_vindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.vinds).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataarray_missing.time_interpolate_na": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["(3650, 200, 400)", "(100, 25, 25)"], ["None", "{'x': 25, 'y': 25}"], ["'linear'", "'spline'", "'quadratic'", "'cubic'"], ["None", "3"]], "type": "time", "param_names": ["shape", "chunks", "method", "limit"], "name": "dataarray_missing.time_interpolate_na", "unit": "seconds", "version": "f66121523f690234d0157cec40492800e64a45953ee7a29896b57a00b9306d23", "repeat": 0, "code": "def time_interpolate_na(shape, chunks, method, limit):\n    if chunks is not None:\n        requires_dask()\n    da = make_bench_data(shape, 0.1, chunks=chunks)\n    actual = da.interpolate_na(dim='time', method='linear', limit=limit)\n\n    if chunks is not None:\n        actual = actual.compute()", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "7267574961dafcd73018e341fcad9b4ac3152ca0708188d954f1b89c59e1c6a7", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_time_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.time_chunks)\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3.time_vectorized_indexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3.time_vectorized_indexing", "unit": "seconds", "version": "34314fb1dc53a0efe5715db67787b2b2e6ea8a764051cce15947d2847f99a3ee", "repeat": 1, "code": "class IOReadSingleNetCDF3:\n    def time_vectorized_indexing(self):\n        ds = xr.open_dataset(self.filepath, engine='scipy')\n        ds = ds.isel(**self.vinds).load()\n\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "31e5ce2c12f548e2123fd54b4503e285c9b7f52af546a57704c89f8bc28ef5b4", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_scipy_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_scipy_with_time_chunks", "unit": "seconds", "version": "dcaf69cef2cbde5221cb6c4c8f7c80c71599556d6c5a354189ad3f4e7ed8fa2e", "repeat": 1, "code": "class IOReadMultipleNetCDF3Dask:\n    def time_load_dataset_scipy_with_time_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='scipy',\n                              chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "reindexing.Reindex.time_2d_fine_some_missing": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_2d_fine_some_missing", "unit": "seconds", "version": "52fe7691aa057637fcf511bf34276b5453f30cf2d2dcfc340ab34dc3fb4239d9", "repeat": 0, "code": "class Reindex:\n    def time_2d_fine_some_missing(self):\n        self.ds.reindex(x=np.arange(0, 100, 0.5), y=np.arange(0, 100, 0.5),\n                        method='nearest', tolerance=0.1).load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "indexing.Assignment.time_assignment_outer": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1d'", "'2d'", "'2d-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.Assignment.time_assignment_outer", "unit": "seconds", "version": "c60573b1b5922b4da094c4fd28efc0da971d399b9bfa01602c0c7f17577da837", "repeat": 0, "code": "class Assignment:\n    def time_assignment_outer(self, key):\n        ind = outer_indexes[key]\n        val = outer_assignment_values[key]\n        self.ds['var1'][ind.get('x', slice(None)),\n                        ind.get('y', slice(None))] = val\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "indexing.Indexing.time_indexing_outer": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1d'", "'2d'", "'2d-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.Indexing.time_indexing_outer", "unit": "seconds", "version": "a18f9d026e3385e9e9a6667ed34578fb019fa213ac0402139a48c9297c5634fe", "repeat": 0, "code": "class Indexing:\n    def time_indexing_outer(self, key):\n        self.ds.isel(**outer_indexes[key]).load()\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "47ac9793003d4210fda0e2131bda770370ea2a18b84fc72274e2326830f3a56f", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.block_chunks).load()\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "unstacking.UnstackingDask.time_unstack_slow": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "unstacking.UnstackingDask.time_unstack_slow", "unit": "seconds", "version": "1f35dee83e2bbdf9a149db3cd97a8bfcaa7bdfce3b9be2c9bee21afc1369e4a3", "repeat": 0, "code": "class Unstacking:\n    def time_unstack_slow(self):\n        self.ds[:, ::-1].unstack('flat_dim')\n\nclass UnstackingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(UnstackingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'flat_dim': 50})", "warmup_time": -1}, "indexing.Assignment.time_assignment_vectorized": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1-1d'", "'2-1d'", "'3-2d'"]], "type": "time", "param_names": ["key"], "name": "indexing.Assignment.time_assignment_vectorized", "unit": "seconds", "version": "cc081696c20edb994410a5c3acec8a2de760c617445f59e5178a2e8cbb09d75c", "repeat": 0, "code": "class Assignment:\n    def time_assignment_vectorized(self, key):\n        ind = vectorized_indexes[key]\n        val = vectorized_assignment_values[key]\n        self.ds['var1'][ind.get('x', slice(None)),\n                        ind.get('y', slice(None))] = val\n\nclass Base:\n    def setup(self, key):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn((nx, ny), frac_nan=0.1)),\n             'var2': (('x', 't'), randn((nx, nt))),\n             'var3': (('t', ), randn(nt))},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})", "warmup_time": -1}, "reindexing.Reindex.time_2d_fine_all_found": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_2d_fine_all_found", "unit": "seconds", "version": "ab6a41656362318ce2d3e1adce0bd5087afea389cbffa6b0358bfc0db9177d8c", "repeat": 0, "code": "class Reindex:\n    def time_2d_fine_all_found(self):\n        self.ds.reindex(x=np.arange(0, 100, 0.5), y=np.arange(0, 100, 0.5),\n                        method='nearest').load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF4Dask.time_load_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "b4e2edfa48871b838320fd96fb61c455fedf0d30eec341626e6898401265d8cc", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_dataset(self.filepath, engine='netcdf4',\n                            chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc4.nc'\n        self.format = 'NETCDF4'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "reindexing.ReindexDask.time_2d_fine_all_found": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_2d_fine_all_found", "unit": "seconds", "version": "715900f015a25b4df12353c80523443a8ffbc007ce6b618bf07c1b51c215c88f", "repeat": 0, "code": "class Reindex:\n    def time_2d_fine_all_found(self):\n        self.ds.reindex(x=np.arange(0, 100, 0.5), y=np.arange(0, 100, 0.5),\n                        method='nearest').load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_open_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "4b4e922faba2e15d00c1a1758a1c5d71f8bf041b5acc38366f5d22c81015437d", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_time_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.time_chunks)\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "rolling.Rolling.time_rolling_np": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["20", "40"], ["5", "None"]], "type": "time", "param_names": ["window_", "min_periods"], "name": "rolling.Rolling.time_rolling_np", "unit": "seconds", "version": "2f947c78659feecee7304129a38d99b365a64495692827eedb4390c639a52a4c", "repeat": 0, "code": "class Rolling:\n    @parameterized(['window_', 'min_periods'],\n                   ([20, 40], [5, None]))\n    def time_rolling_np(self, window_, min_periods):\n        self.ds.rolling(x=window_, center=False,\n                        min_periods=min_periods).reduce(\n                            getattr(np, 'nanmean')).load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})\n        self.da_long = xr.DataArray(randn_long, dims='x',\n                                    coords={'x': np.arange(long_nx) * 0.1})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_vindexing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks_vindexing", "unit": "seconds", "version": "961a785d14bbd98fa46f39fb10635958e2ede9ad401705153f8469769f9bc619", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks_vindexing(self):\n        ds = xr.open_dataset(self.filepath, engine='netcdf4',\n                             chunks=self.block_chunks)\n        ds = ds.isel(**self.vinds).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "reindexing.Reindex.time_1d_coarse": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_1d_coarse", "unit": "seconds", "version": "e153ddfab1b7b88d3c89ae11ea136921acfd6e017bd4f64e490ac04229d5fc32", "repeat": 0, "code": "class Reindex:\n    def time_1d_coarse(self):\n        self.ds.reindex(time=np.arange(0, 1000, 5)).load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "reindexing.ReindexDask.time_1d_fine_some_missing": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.ReindexDask.time_1d_fine_some_missing", "unit": "seconds", "version": "4cb945735b52fa5fec068e370a5c7623f9a84ef3ee9556cd6f593b380fc8688a", "repeat": 0, "code": "class Reindex:\n    def time_1d_fine_some_missing(self):\n        self.ds.reindex(time=np.arange(0, 1000, 0.5), method='nearest',\n                        tolerance=0.1).load()\n\nclass ReindexDask:\n    def setup(self):\n        requires_dask()\n        super(ReindexDask, self).setup()\n        self.ds = self.ds.chunk({'time': 100})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3Dask.time_load_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "d86106963bca04f706ff5ce7bf69c9b94b6b462d8010934a215e9a8ba43d6171", "repeat": 1, "code": "class IOReadSingleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks(self):\n        xr.open_dataset(self.filepath, engine='netcdf4',\n                        chunks=self.time_chunks).load()\n\nclass IOReadSingleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataarray_missing.time_bfill": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["(3650, 200, 400)", "(100, 25, 25)"], ["None", "{'x': 25, 'y': 25}"], ["None", "3"]], "type": "time", "param_names": ["shape", "chunks", "limit"], "name": "dataarray_missing.time_bfill", "unit": "seconds", "version": "d3747cba08f9b6cdfe9980a477da5ea420ed917be7dced9362c9f42c64897f77", "repeat": 0, "code": "def time_bfill(shape, chunks, limit):\n\n    da = make_bench_data(shape, 0.1, chunks=chunks)\n    actual = da.bfill(dim='time', limit=limit)\n\n    if chunks is not None:\n        actual = actual.compute()", "warmup_time": -1}, "dataset_io.IOWriteNetCDFDask.time_write": {"number": 5, "min_run_count": 2, "timeout": 60, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteNetCDFDask.time_write", "unit": "seconds", "version": "d8a83cdc476296464793c18e5b22983fc85185c3c8e19d0b389ddc52bb2ca84b", "repeat": 1, "code": "class IOWriteNetCDFDask:\n    def time_write(self):\n        self.write.compute()\n\n    def setup(self):\n        requires_dask()\n        self.write = create_delayed_write()", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_scipy_with_block_chunks", "unit": "seconds", "version": "7c602f1301956889b0729ac77616d115fecb63f9c1b22b507ba44258f3dee7ca", "repeat": 1, "code": "class IOReadMultipleNetCDF3Dask:\n    def time_load_dataset_scipy_with_block_chunks(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='scipy',\n                              chunks=self.block_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4.time_load_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4.time_load_dataset_netcdf4", "unit": "seconds", "version": "17697b98f86a4328a58ac6ae3faead47c7f0b715ee31c55385dbd821b12be2ec", "repeat": 1, "code": "class IOReadMultipleNetCDF4:\n    def time_load_dataset_netcdf4(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4').load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "reindexing.Reindex.time_1d_fine_some_missing": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "reindexing.Reindex.time_1d_fine_some_missing", "unit": "seconds", "version": "a6816dc287dc6188df61c66b31f4d91f70e60e2103e55b4e9b743434248d1bd4", "repeat": 0, "code": "class Reindex:\n    def time_1d_fine_some_missing(self):\n        self.ds.reindex(time=np.arange(0, 1000, 0.5), method='nearest',\n                        tolerance=0.1).load()\n\n    def setup(self):\n        data = np.random.RandomState(0).randn(1000, 100, 100)\n        self.ds = xr.Dataset({'temperature': (('time', 'x', 'y'), data)},\n                             coords={'time': np.arange(1000),\n                                     'x': np.arange(100),\n                                     'y': np.arange(100)})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_load_dataset_netcdf4_with_block_chunks", "unit": "seconds", "version": "63229a4b37606aa3231bdceb6b9426c525b5f28ee5a6e53ad28bc5ace1e322fb", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_block_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.block_chunks).load()\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF4Dask.time_load_dataset_netcdf4_with_time_chunks", "unit": "seconds", "version": "e039000defe02a48c0348de1c5d860aef57359b28969d5479009244e192fef75", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_load_dataset_netcdf4_with_time_chunks(self):\n        xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                          chunks=self.time_chunks).load()\n\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF4'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "indexing.IndexingDask.time_indexing_vectorized": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1-1d'", "'2-1d'", "'3-2d'"]], "type": "time", "param_names": ["key"], "name": "indexing.IndexingDask.time_indexing_vectorized", "unit": "seconds", "version": "143839c8873b858ce59e89769bd9474c4edfa101b8e07768bf3d2adb635eea1a", "repeat": 0, "code": "class Indexing:\n    def time_indexing_vectorized(self, key):\n        self.ds.isel(**vectorized_indexes[key]).load()\n\nclass IndexingDask:\n    def setup(self, key):\n        requires_dask()\n        super(IndexingDask, self).setup(key)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})", "warmup_time": -1}, "indexing.IndexingDask.time_indexing_basic": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'1slice'", "'1slice-1scalar'", "'2slicess-1scalar'"]], "type": "time", "param_names": ["key"], "name": "indexing.IndexingDask.time_indexing_basic", "unit": "seconds", "version": "9fb8facba4c1038ab2e3ae2ae7fa50dd13d08137e28e617688ff9278310d0b44", "repeat": 0, "code": "class Indexing:\n    def time_indexing_basic(self, key):\n        self.ds.isel(**basic_indexes[key]).load()\n\nclass IndexingDask:\n    def setup(self, key):\n        requires_dask()\n        super(IndexingDask, self).setup(key)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})", "warmup_time": -1}, "dataarray_missing.time_ffill": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["(3650, 200, 400)", "(100, 25, 25)"], ["None", "{'x': 25, 'y': 25}"], ["None", "3"]], "type": "time", "param_names": ["shape", "chunks", "limit"], "name": "dataarray_missing.time_ffill", "unit": "seconds", "version": "7553aed5c9449bdaf77891616b0fa59ebd094de3578ce536f72c23fcdf99fb9a", "repeat": 0, "code": "def time_ffill(shape, chunks, limit):\n\n    da = make_bench_data(shape, 0.1, chunks=chunks)\n    actual = da.ffill(dim='time', limit=limit)\n\n    if chunks is not None:\n        actual = actual.compute()", "warmup_time": -1}, "rolling.RollingDask.time_rolling": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'mean'", "'count'"], ["True", "False"]], "type": "time", "param_names": ["func", "center"], "name": "rolling.RollingDask.time_rolling", "unit": "seconds", "version": "89274d71b032a5570b891544ff88f729d06db4d0ab67be1eb3a4313d970c0aaf", "repeat": 0, "code": "class Rolling:\n    @parameterized(['func', 'center'],\n                   (['mean', 'count'], [True, False]))\n    def time_rolling(self, func, center):\n        getattr(self.ds.rolling(x=window, center=center), func)().load()\n\nclass RollingDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(RollingDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'x': 100, 'y': 50, 't': 50})\n        self.da_long = self.da_long.chunk({'x': 10000})", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_block_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_block_chunks_multiprocessing", "unit": "seconds", "version": "f5cb3608e80013e72863158400b5a963f971b94d979c096f09f53d506aa76a58", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_block_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.block_chunks)\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "rolling.Rolling.time_rolling": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'mean'", "'count'"], ["True", "False"]], "type": "time", "param_names": ["func", "center"], "name": "rolling.Rolling.time_rolling", "unit": "seconds", "version": "662a6efdbbb56d0e74d7066b3306b056c31a1d5ec6a462b782de6e3e31834461", "repeat": 0, "code": "class Rolling:\n    @parameterized(['func', 'center'],\n                   (['mean', 'count'], [True, False]))\n    def time_rolling(self, func, center):\n        getattr(self.ds.rolling(x=window, center=center), func)().load()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.Dataset(\n            {'var1': (('x', 'y'), randn_xy),\n             'var2': (('x', 't'), randn_xt),\n             'var3': (('t', ), randn_t)},\n            coords={'x': np.arange(nx),\n                    'y': np.linspace(0, 1, ny),\n                    't': pd.date_range('1970-01-01', periods=nt, freq='D'),\n                    'x_coords': ('x', np.linspace(1.1, 2.1, nx))})\n        self.da_long = xr.DataArray(randn_long, dims='x',\n                                    coords={'x': np.arange(long_nx) * 0.1})", "warmup_time": -1}, "dataset_io.IOReadSingleNetCDF3.time_load_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadSingleNetCDF3.time_load_dataset_netcdf4", "unit": "seconds", "version": "669dd5b500b7690407c2bf13b2cb6b3737ebc54ea47dd151c023f12dd31a67c4", "repeat": 1, "code": "class IOReadSingleNetCDF4:\n    def time_load_dataset_netcdf4(self):\n        xr.open_dataset(self.filepath, engine='netcdf4').load()\n\nclass IOReadSingleNetCDF3:\n    def setup(self):\n    \n        self.make_ds()\n    \n        self.filepath = 'test_single_file.nc3.nc'\n        self.format = 'NETCDF3_64BIT'\n        self.ds.to_netcdf(self.filepath, format=self.format)", "warmup_time": -1}, "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_time_chunks_multiprocessing": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOReadMultipleNetCDF3Dask.time_open_dataset_netcdf4_with_time_chunks_multiprocessing", "unit": "seconds", "version": "689aaf2f3779c7654b132d8d27b4a07df27d4ec80b757ae45c99545583cf087f", "repeat": 1, "code": "class IOReadMultipleNetCDF4Dask:\n    def time_open_dataset_netcdf4_with_time_chunks_multiprocessing(self):\n        with dask.config.set(scheduler=\"multiprocessing\"):\n            xr.open_mfdataset(self.filenames_list, engine='netcdf4',\n                              chunks=self.time_chunks)\n\nclass IOReadMultipleNetCDF3Dask:\n    def setup(self):\n    \n        requires_dask()\n    \n        self.make_ds()\n        self.format = 'NETCDF3_64BIT'\n        xr.save_mfdataset(self.ds_list, self.filenames_list,\n                          format=self.format)", "warmup_time": -1}, "dataset_io.IOWriteSingleNetCDF3.time_write_dataset_netcdf4": {"number": 5, "min_run_count": 2, "timeout": 300.0, "processes": 2, "sample_time": 0.01, "params": [], "type": "time", "param_names": [], "name": "dataset_io.IOWriteSingleNetCDF3.time_write_dataset_netcdf4", "unit": "seconds", "version": "7871c9a54e60a88d74964199962fb47096675c28033d0e029e2a5f8310d75c2f", "repeat": 1, "code": "class IOWriteSingleNetCDF3:\n    def time_write_dataset_netcdf4(self):\n        self.ds.to_netcdf('test_netcdf4_write.nc', engine='netcdf4',\n                          format=self.format)\n\n    def setup(self):\n        self.format = 'NETCDF3_64BIT'\n        self.make_ds()", "warmup_time": -1}, "interp.InterpolationDask.time_interpolation_2d": {"number": 0, "min_run_count": 2, "timeout": 60.0, "processes": 2, "sample_time": 0.01, "params": [["'linear'", "'nearest'"]], "type": "time", "param_names": ["method"], "name": "interp.InterpolationDask.time_interpolation_2d", "unit": "seconds", "version": "a7aed8bb6b00f16a02baa3b8fd4d90da37e11b50e6ee7fea5ccbfbd7aab06f1f", "repeat": 0, "code": "class Interpolation:\n    @parameterized(['method'],\n                   (['linear', 'nearest']))\n    def time_interpolation_2d(self, method):\n        self.ds.interp(x=new_x_long, y=new_y_long, method=method).load()\n\nclass InterpolationDask:\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        super(InterpolationDask, self).setup(**kwargs)\n        self.ds = self.ds.chunk({'t': 50})", "warmup_time": -1}}}