{"pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]], "hash_length": 8, "revision_to_hash": {"11264": "9f5e5eb842b3a64de1a7a0644e09170ad9b93b18", "11266": "e1277952b9dc966c8aae381d6c5f05a542ebef7f", "10755": "ceb1e3a85fec2e865fd66eeeba5890cee30ac776", "11270": "2e37854741af54547019fa57f34110719bca7811", "11180": "b4cd7e9e2954f4d901e691770ab20eb3c4d12e7c", "11281": "db873ee07674f48b18cc2612aeeb1d148cc3e7e5", "11283": "685e9187371bf79e09f42f56bb91a847a895cbf4", "11284": "82f12b8a15d65f322fbb466e4a5c7e3e24e94c8b", "4629": "1bdfd07496f293fc614bb3566869d9aaa5d3b03a", "11287": "adfbb329d233581c5760213e70f8f258b33e3684", "10776": "9195bea8337625cdc721052cdf0b23c300fa5b62", "5892": "d72a6cff3eb8de1abe15185f67fe2c6c70a39940", "10778": "c97b1b6c974da5ed01e09ab257322e7096ad1aaa", "11291": "ee3239208f6981b8339c5e1258115b1ce92463c9", "11292": "1409f7f356e0e7df294dedda166f1bebfc936bde", "11293": "e040d6345324446f7d912664f5d5a568632a4acf", "4638": "edbacd1cc873b142073447157596f0d7f2c56e56", "4639": "ecfd9a3aaf264876160067c60ac1ccc02a08c63f", "10784": "e728dae36a0a72949585fb8c49f4dbd000b57ee7", "10785": "b91fa66a50bfa600efabf19e69575d92cec269e6", "11526": "d4e3301d05801f0264c65b93701ed7596e2d81f7", "6183": "4ce6ecdf9a4745275a94380ca680345ee83e7230", "10792": "6af7e2eb68e6d20b21ff4b90796b085e1a1fa1ef", "10793": "da11c23ed9c2b5db146ffb96b5d05e4cf5206307", "7210": "76b7e426d4acb206b68bd314040d59baa68b14ec", "10795": "0459233aa88ff199ab9c9312b8b5abf31291875c", "47": "d9bc7cf72a2c1e1db5071f5959caf18db51a02e1", "10802": "9b2a4546aaf73637e7d6749d5c500f6703f67068", "9907": "8b2772038949bce5aa5c96bb68a3817d77355715", "10807": "9ae663063774cf6874f8755791f50704034111ef", "10810": "3dd8b7edcede8a5ca1a835dd70690a5ea9beb92b", "10811": "568d2409719f935bf21a88b832c9ab2f129fbf3c", "10453": "49f964e6babdb6fd48bd94d49c63049d7b58a432", "10819": "a94d211cb129b5d7378957519afda0acd117bd90", "10820": "1fb65f500b4927bd99bc593f54f5148e79b03f2d", "10821": "61913ba4a94bb2f4d9e10593df0588159d22e9ab", "10827": "cdaf9370724287e864e415fd80fa92a6f562e0d1", "10829": "df0959fbbc9aaa3ae992463481803edca649cc4e", "10830": "3ddaf181a69c8533d2cf984c680bd11be938487c", "11021": "7628d590cf90a83f6ba5708c57498f7b07e9d846", "1616": "53426a0077aad5b36d91bbeb247f2f8e609e7ef7", "1621": "403ebe611c095da0a391403e25f46ead65756afe", "10841": "7949b582285bc46a043bf038e48f571351420189", "10330": "ed43bae1e91a66253e7abfdd01e6ee736879acf0", "10845": "f0e6f28a4f0d0ff6e249c668ca8f5c2b9144d4bf", "327": "38e649b44f549264e18bac2bc053b5fbbfce2665", "1009": "4a25a5cf066a5e8116fc28b186ecd681c2f28680", "10854": "74e6221809e430130aca5c7e96e960b34d4ec282", "10448": "e01005778b52386bb45754b420781fcd6edaf8f6", "3176": "5755ccb6129aa5fd76292ad56f550a2242246c26", "4713": "af16654230a0323ed67ed8931f74fc4d7ff6244c", "10858": "c751623f74efcdfcb78197182ae47bc002dad093", "11538": "76c28607155bf29c6f6ddfbb015de27bb4eaffb9", "10863": "8c725193c362152db71ea69d7a76e41566e7c0f8", "10865": "5ac5c8e8c70da068718b67ed24349fa174cfbff8", "10866": "7f09e07ddf631c50b9e98a739decf86eb9ed34af", "10867": "28a61daf25a4b4bd01f7aefb3ef83ac2c5a4570d", "9844": "03f4997359e9d439db9709fb359d7b9c0ea38556", "10869": "f636eacadb6d1bf893b8a7a182dffc77c5b188c8", "3192": "cbcb31330604d56bb6b5f6fcb29e7f281dd16853", "10873": "cf3cf93a17f9889f7a2fdaef7f80b80f0b39a1b8", "3195": "0b254ae73beb178c7e01dfd65e2af5a78f0e33ba", "10877": "af8a78e5b12ebb5709a57f9350b4b1f4c8f0c7db", "1663": "433e329661c47d55793c85de9e6cb636e86dfb57", "10883": "942ed2996daffd88eec7e5d1e351c3171693b946", "10884": "9cb7cd3aadbdced75daafc7e408f3c0e5c7ba4cd", "10886": "ce2f5281a457e6bab342f5a816f985f8a2dd6366", "10894": "48ada036d6d3a570445d1f0b25b3171a5f10da1d", "5779": "c5919ae4403aebfbbe6618dc365220ecd61311af", "10900": "29fb9e97eee64f769f033190116b4909c81b2905", "10902": "be5b120c24964634d8ac7684b6aa9975999623f3", "10904": "9c27a15555e9fe771c319404da8256e8a08761d1", "10948": "a619ea848791659d182cc9bc463ebe150bdb4d44", "10909": "9dd29ae595781a323d004f4d29e9a567d9e87059", "11479": "60901feed1808fb645931e9cbb0b78444399f674", "10911": "e65130ef2dcd39119a89efb028c84f92da3db80f", "10916": "413a6d3e32c8e2dfb50ddfab1a1e069ae1148a8a", "10918": "6271b1a097ef2045fd6515d863ed3e40f5a8beea", "10919": "a9b46545976c21d19ca48f22c71f66485c0df430", "11019": "f451bc0f6e3586fd66c7ddec84cbd15e168205e0", "11002": "c1621cffb595fcdb003b16051c234462a97fae07", "10951": "00db3adfb5b530ede0dfccb12d7c5a10b0cfa69e", "10924": "e439aaf2c2b463ec26979eb5702fd47ecef510ad", "10925": "40c3daf07939b63b10cefc9ee0338549c4e71050", "10927": "335de9824592939c95f63019dfb5a7f3133a0538", "10928": "a966c99ca10eb6dfa014d961e3b576c1c4c967b3", "10419": "ac4a8f1f31a28d34b81871ad3a6864b917474263", "10935": "a8885128f501b563ded7bb11d51c080151a65b97", "10936": "27f0de279f089ea15c1cba899a9633bac55bad21", "10939": "6f45aaa0d58e442667ae3b4cecc70f26903daff7", "11453": "53cc6630d89939a7ffdc448da3bf5bf0c2d70d29", "5311": "c2c2f08699f0c0c4a479802b9e71fb913eaf1049", "11088": "e5f38a57064b1771a9bf7bae826ec34eaf01bb78", "10955": "0e9de87d6cf8aa611999980dbd10f4d73da3668a", "10436": "974f664b9f502be3906d18fc8367434d8e26bb6a", "11463": "a8692ec9b8c33df9cc6601cb42080a0fb051fbf3", "11465": "296bec3d1a3c3657eee67b11c658935c4cc76db6", "11466": "023a7baf1dc500604cc65995f6533bfea7f910b9", "11467": "4f6bf7ae8af434e1be9fa83072fd7c84c1a7e758", "10956": "9fb2d157ad11a706c89de1dd9b771e80eeea85a2", "10958": "807a8c3cba982b749fd5dd4b4eabd3a0a8347ada", "10960": "0451c00d7dcd6ee1fbd1b68cc147c91c3735640a", "10449": "4686b7da06593ff002986de6a378cba44f768148", "10962": "c2a214dcae3115cda6a64bfaa8c10bea23d4e7aa", "8403": "50fa219975df80fc1ae81486bb48ed1c0daf791f", "10964": "e0bb8b6c76fc6670af63123150659d20fac757be", "11214": "b5aa11b31bfcf01e5dbf2d0f0ea507a05f58adc6", "11478": "31b863204eb944f2c86c7f0d41f682590f112d9a", "11515": "a585fa1caa9da8acf786566c21f43e478a170bc3", "10968": "16510d9db977710556c303cd2d51cf216a4848dd", "11481": "dffe9f3302e0f03b8d0ae5c968ab55886b2ae0b2", "10972": "62e29cd89dc858d8fb9d3578034a2f456f298ed3", "10461": "e8dcd9c2f6935b71ca1fe0e9f4cbdfb4d0774512", "10462": "f40510e263740fc1190af0e9789474e20bc71779", "11489": "ea07fc26420389def4b16879cf35187c1ce37b98", "10466": "2b37a31e19dc21077fcf533b2322394cb0b509dd", "1659": "d30192bd70c2bb2e21204e5fe3ad56403b8201b2", "8420": "4839ae40e5c013fbbb05cae09060199a2470931b", "2789": "2df4a65bca8677d06d2324f15def870c0fec69a8", "10470": "e00b1a0fd7f34a659ba0493afdc66aa6a54662cf", "10471": "912d9d26872cc0ee0dc6a377c75ac01277091a4f", "8424": "feda03618eee64a1aecb17c5cceb534e1d2538a1", "11498": "f32424784f29f85c10fb4c4a1a8ba071bd82bec7", "11499": "8bcb388e35edf07b817d06b61661530c9b7aff1f", "11500": "414a9b80e58054d4aff0b0ff9135e3bc345c37f8", "11501": "a0a9e37f2c5fb62eb3f65ff27be3169d874921b4", "11502": "8ebcecf42bd4aef56514b3237f7b14c880320944", "11504": "fe94ee9041ce850c7b1009d798052aaa427d44d1", "11510": "b069a035f8e34f3a7d518c1862c3116c7966c1ed", "11512": "3f07484878c89dd9c4e33bed866e3c6a1fb88211", "11513": "385eae184d2d5295315c04bd1348305254c8fa5c", "11514": "57214ac829acafe0ebc1cac91f4bcbfb10691718", "11003": "69202a906e47ee9b0f487395fee6ec42fdd3e549", "11516": "409dab8d31b2f296cac2e388ce7f2379ceac30ad", "11517": "e46e7f429bad4cf50e173a8cb573bab3dddc623b", "1278": "41998c590d19dc816399f3af28af9570684a34d5", "11477": "b8f1dc8e0bdd8b2419a55538ce3873fa66541f15", "11010": "4aec361c188e63cb08886bd07849ca26c7a7eb78", "11011": "1a8c61caa5063e743e8165b3b5c078c409bf7bb5", "11012": "9c4632f43eb6f6e85bf33f9adf8627d01b024496", "10454": "18f97d864a9468555851aac08c731b6813db2091", "2310": "c841314d9959faad9b572788e0499a0c9759f929", "11531": "59efd95af32f1ca8c245ce6e425ee4b5fe97f33b", "11532": "d55132ba3fcffee9d2635645085283f1400e2272", "11533": "c788aa6574787bdea52aad9ae9addb35371c869a", "11022": "29a22e17c8b4ccf26383e3007ab014eb18b81f12", "11480": "8f733a4cd7cd5ababbd7d0aea3277bd48270a87c", "10953": "bdd8eab424592d3e7dc1024b2dc92fb7c5d6a3ad", "11539": "c8a437a42860ad86039005b82e718cf7f4e44609", "9492": "93e9d90bb3bb9d04e55a5087996e87efe2fb8fdb", "11542": "157f2917b3fe9cbc64751de8b248943c5c3ec072", "10969": "972ce191ba6361356de17274bcf7ef2bb4d989e8", "11544": "51d4fd9294955deee48491a5ae4c01c1dfe0f48d", "801": "47123609701d5d6ba254fe1c58c34cf2b9e5c452", "8413": "ccc35c1ed0e2caedd0b70a9c0c73cf3736851904", "11518": "107cec0c50b56b39dee695e79c49f766961c9858", "11060": "9b083fd59b8b718803062bcfe69078646b3e3c57", "11007": "d8d36fd3af7bd6566f687cd449de7d71b78791c8", "10465": "3fc08f35f998291daf3a9e22f60ec74499fd085b", "11080": "e17399b29f3529dec91845868fb84992b67bfcc0", "11084": "31d9ecc2f0d8dd3373af3e80b2dcc7887ff2ca24", "336": "1fc7a2fa5616b100cac47f91b911177de674a78d", "11491": "825b95dd8c13fc8d34f94b7c2acac1515e3d8ddb", "11093": "9e34417d6e8563f43203c64dc559e1a65c54f10f", "11095": "bca527319521f0923856be56a73a542dc8aee4dc", "11096": "4cf08ea714762501a14d9335e12542eb1dae3711", "11097": "f917cbc30089399212d74cfacdacde2e95dee0e9", "4954": "9ae0313a31c3825ec9c6a508851fa1dd522530c4", "4956": "f23d36f12d94121eb32063c825eef58bf06e4903", "11101": "83bcc9bc40fbd174913eabcd5ed1f9e4a6be6712", "11102": "50eef35a59f3ba3d74ba773c642f3c0d2d5c5486", "863": "a339c4ec0674fe86f78e85d08cde563d26b25107", "11105": "026b15c31ec64082ba62ef85e1b6415cd327b4be", "11106": "693bc3d2520f9df244dca93a36d1d2b2c1c37cda", "11534": "0255fee4adc6fa9dc7b6158b4c0772a71cf4e4e3", "11196": "5ee7e18387bad8e56223d853b7125be466277e72", "11118": "6059644841240c46f1666e3fc1cc9fc229d607f4", "10472": "143050e1212f0e1ee0a130824890df2813318566", "11122": "94ab40a38bbe813a1acae6365bbe66aef30005ed", "11123": "d61625b3950ffa9ee3d59e91295b49357be03b27", "11124": "d3a151d81d8601c8c23b10f6b5d81c4e2215fea9", "11126": "0bd477888f4d48e89f32fd28daa97e636d7adf18", "11241": "751c08226867e8b5ae30a74537c03b0d3273eb8d", "11131": "38477b13c2462e96e5164c265d4efcbfbad856b2", "11132": "04be876e45f522d9414214e29fbd1a4528f906bf", "10986": "133aa703ecdc4b54b36a1515d7cb7a305a492c6f", "11135": "012c328b417403c72c749609bd07a713d76702c8", "10941": "97d63d99aed77c517de1559e147c7f4669a24357", "11139": "c15c393d03d0211aa0801d714d2930d7c528865f", "10633": "16067d0711279fd9dde95ddabc7bc9a9fc5803ee", "10635": "02c6eb9065715206e800c0cb1c1fa098ea484263", "10640": "f620e268f7d4ced1f2227774808ea99d11696eff", "10642": "a2661710c2b48834c3e51028df6108fc3e96bb71", "11156": "c552416f439a4e64551620a5541053d42b227c20", "10905": "ef1d91a0795ad0e0e65a6de0690be5e32713caf1", "11160": "61531c7f829310084e62eb85d7fc03a462fc6641", "3652": "b6c15cb5b017d608c906b713d9b8d34229619174", "11164": "3282eabcf3fda5f862d7a3f0fb3de3cd7a90c7c0", "11165": "2ec9b0aa8958122ac2fbbd335e15175eb18bf417", "2464": "70d8a6090ef4701284c7c94aea5546ce7610defb", "11171": "57484d3477ea011d81449fd02f38011f48c12c63", "10663": "fcbf4ae73272f48837f6c5912165f5ec7f1d21c2", "1451": "ae0e6fd114370a65232adb0e8492d23b10303c79", "10668": "95628b5ad147eb82d2e8c5744f8fb5028e200957", "11181": "60ee5804cd7dd5a3b0972fa39fedf2c056be7245", "10772": "483dafcf35ea415643fdb78641f9d76e94bb9e2a", "11183": "da5d4392d6d5979b8a27da11c278674bde9fad69", "11189": "9f74386fa1ad1a6d8831f0bef3d9781c830ae74b", "11190": "5a312622ddc9b2ff72cf082adc30189eda62ac47", "11192": "ee2fd32c899379be26b39eb180294e84ddbfb96a", "10681": "9cad3eda5f88ab5198f8e4b9a877bc515a3beb7f", "10684": "e793e63a7d118d1a8b0c000e9a0320cd11f4bbe4", "11267": "1d734b402b99443e2e141993b6785ce4f851f1b3", "10656": "02fd6028c65b78f5960b86defea5daa09da4d325", "10691": "35ef2171e0da60e5d8f68c6c29b8e183a5c35a19", "5060": "2713d3209548fd228c109eaff7878e3a04e5982c", "11182": "6854dcbb2534a22f1c84665d2a7d95b0753a6688", "10698": "bd7055570e6808577757e4d6e715e15da2eb47af", "10701": "92a9281dae62d1ea481fb712d175d809dfa6d4ae", "10702": "0f03a2cd3b30836ec97e77ff9422c0636f747916", "11215": "455985f9bfa9513c38d06609d9ca195b42e0681c", "6102": "6e24c58d964c03a977ec79b3f814c461b90d748e", "9188": "0b8664a430d87e02af9d71a44d09fec9f29a0168", "2526": "e6d43d4a982056fa7c08d37eb2e70707dac1816d", "7137": "7e68e69144ed14636f2598377ee3c59445295ab8", "7139": "aa964efd599cf47c3345a2123b1686959f2ee87c", "7140": "ac240eec58ac04db91bba3d1223b3ce9b91ef68e", "11240": "2578208b03abc107a0dd09bfb62b079c6d90b784", "1001": "85531c6ffa002a4ca1a38941b91db3b78eb8ffa4", "1517": "6271947a93b823da4447ff9c69c30a8364e932f7", "11005": "7bd1971337a54fb3bd8ebecb2d78b10dc3216bd2", "10737": "68a08187c6f59a36f3426ed97ad0988996fd8afb", "10738": "2f436f1dc285e944f15f6cee72817c0a4f98603c", "1011": "44bf51b9dea9e101bc74e4616f2a78011cd65681", "10741": "7549015a7b27e85652bcb1b6442caec7df0d16fa", "10743": "233ac9f02c5174b7c348beddb124a202e09f3011", "7126": "d3bb552527e3bc2086fac3821948d96ca06af599", "10747": "86bbed0937aef504cc1a9837c1a21271cce5bef4", "11260": "5751e4ead9fdc16a89c84b8a372339c49c73af27", "11263": "3aca77725d69827bdd7ddf0d87fe8b3e6c19e71b"}, "show_commit_url": "https://github.com/scikit-image/scikit-image/commit/", "params": {"ram": ["501692"], "six": ["1.10"], "cpu": ["Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz"], "numpy": ["1.13", "1.14"], "matplotlib": ["2.2"], "python": ["3.6"], "machine": ["asv-runner"], "arch": ["x86_64"], "cython": ["0.27", "0.28"], "scipy": ["1.0", "1.1"], "branch": ["master"], "os": ["Linux 3.13.0-116-generic"]}, "project_url": "https://scikit-image.org/", "tags": {"debian/0.10.1-1": 6102, "v0.10.1": 5892, "v0.8.2": 3195, "v0.14.0": 10330, "v0.9.3": 4713, "v0.11.3": 7210, "0.11.2": 7140, "v0.12.1": 8413, "debian/0.5.0+git100-gfeb3e92-2": 1517, "debian/0.6-1": 1621, "v0.3": 801, "debian/0.9.3-3": 5060, "v0.7.1": 2464, "v0.4.1": 1009, "debian/0.11.0-1": 7137, "v0.9.2": 4639, "0.11.1": 7139, "v0.12.0": 8403, "debian/0.6.1-1": 1663, "v0.12.2": 8420, "debian/0.9.3-2": 4956, "v0.13.0": 9492, "v0.14.1": 10854, "v0.2.1": 336, "debian/0.13.1-1": 9907, "v0.9.0": 4629, "v0.3.1": 863, "v0.8.1": 3192, "debian/0.9.3-1": 4954, "v0.6.1": 1659, "v0.11.2": 7140, "v0.12.3": 8424, "v0.8.0": 3176, "v0.4": 1001, "debian/0.8.2-1": 3652, "v0.2": 327, "v0.10.0": 5779, "v0.7.0": 2310, "v0.7.2": 2526, "v0.9.1": 4638, "debian/0.12.3-2": 9188, "v0.5": 1278, "v0.15.0": 11491, "v0.1": 47, "debian/0.5.0+git100-gfeb3e92-1": 1451, "v0.13.1": 9844, "v0.6": 1616, "debian/0.7.2-1": 2789, "debian/0.9.3-4": 5311, "debian/0.10.1-2": 6183, "v0.14.2": 11260, "v0.4.2": 1011, "v0.11.0": 7126}, "project": "scikit-image", "graph_param_list": [{"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.13", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.27", "scipy": "1.0", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.14", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.27", "scipy": "1.0", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.13", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.27", "scipy": "1.1", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.14", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.27", "scipy": "1.1", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.13", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.28", "scipy": "1.1", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.13", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.28", "scipy": "1.0", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.14", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.28", "scipy": "1.0", "branch": "master", "os": "Linux 3.13.0-116-generic"}, {"ram": "501692", "six": "1.10", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "numpy": "1.14", "matplotlib": "2.2", "python": "3.6", "machine": "asv-runner", "arch": "x86_64", "cython": "0.28", "scipy": "1.1", "branch": "master", "os": "Linux 3.13.0-116-generic"}], "benchmarks": {"benchmark_feature.RegisterTranslation.peakmem_reference": {"type": "peakmemory", "timeout": 60.0, "param_names": ["ndims", "image_size", "upscale_factor"], "unit": "bytes", "version": "32ed3db350acafd1d3a580a8f16adef9045ad41ed6ed3c384d00d9db6afb035a", "code": "class RegisterTranslation:\n    def peakmem_reference(self, *args):\n        \"\"\"Provide reference for memory measurement with empty benchmark.\n        Peakmem benchmarks measure the maximum amount of RAM used by a\n        function. However, this maximum also includes the memory used\n        during the setup routine (as of asv 0.2.1; see [1]_).\n        Measuring an empty peakmem function might allow us to disambiguate\n        between the memory used by setup and the memory used by target (see\n        other ``peakmem_`` functions below).\n        References\n        ----------\n        .. [1]: https://asv.readthedocs.io/en/stable/writing_benchmarks.html#peak-memory\n        \"\"\"\n        pass\n\n    def setup(self, ndims, image_size, upscale_factor, *args):\n        shifts = (-2.3, 1.7, 5.4, -3.2)[:ndims]\n        phantom = img_as_float(binary_blobs(length=image_size, n_dim=ndims))\n        self.reference_image = np.fft.fftn(phantom)\n        self.shifted_image = ndi.fourier_shift(self.reference_image, shifts)", "name": "benchmark_feature.RegisterTranslation.peakmem_reference", "params": [["2", "3"], ["32", "100"], ["1", "5", "10"]]}, "benchmark_exposure.ExposureSuite.time_histogram": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "0652d42f2dece4d9e4c0008d62e9fd7a5368e4e2e52a4ae6f12d7c17d8320053", "code": "class ExposureSuite:\n    def time_histogram(self):\n        # Running it 10 times to achieve significant performance time.\n        for i in range(10):\n            result = exposure.histogram(self.image)\n\n    def setup(self):\n        self.image = img_as_float(data.moon())\n        self.image = rescale(self.image, 2.0, anti_aliasing=False)", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_exposure.ExposureSuite.time_histogram", "warmup_time": -1, "sample_time": 0.01}, "benchmark_segmentation.SegmentationSuite.time_slic_basic": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "3b0bf2035271d00e951868acabb8686541bd5db3ba227dc0e61be2a1c0f68d27", "code": "class SegmentationSuite:\n    def time_slic_basic(self):\n        segmentation.slic(self.image, enforce_connectivity=False)\n\n    def setup(self):\n        self.image = np.random.random((400, 400, 100))\n        self.image[:200, :200, :] += 1\n        self.image[300:, 300:, :] += 0.5", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_segmentation.SegmentationSuite.time_slic_basic", "warmup_time": -1, "sample_time": 0.01}, "benchmark_feature.RegisterTranslation.time_register_translation": {"type": "time", "repeat": 0, "processes": 2, "param_names": ["ndims", "image_size", "upscale_factor"], "unit": "seconds", "number": 0, "version": "20b8d900d94381fee3cb57438244221b62c862ed3a0ad1de92d64e781ae4d138", "code": "class RegisterTranslation:\n    def time_register_translation(self, ndims, image_size, upscale_factor):\n        result = feature.register_translation(self.reference_image,\n                                              self.shifted_image,\n                                              upscale_factor,\n                                              space=\"fourier\")\n\n    def setup(self, ndims, image_size, upscale_factor, *args):\n        shifts = (-2.3, 1.7, 5.4, -3.2)[:ndims]\n        phantom = img_as_float(binary_blobs(length=image_size, n_dim=ndims))\n        self.reference_image = np.fft.fftn(phantom)\n        self.shifted_image = ndi.fourier_shift(self.reference_image, shifts)", "min_run_count": 2, "params": [["2", "3"], ["32", "100"], ["1", "5", "10"]], "timeout": 60.0, "name": "benchmark_feature.RegisterTranslation.time_register_translation", "warmup_time": -1, "sample_time": 0.01}, "benchmark_feature.FeatureSuite.time_glcm": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "a9a1db6396d46b1387f5796d3d78fc7ed3a09aae6274f2e643f8cd8b1dc6879b", "code": "class FeatureSuite:\n    def time_glcm(self):\n        pi = np.pi\n        result = feature.greycomatrix(self.image_ubyte, distances=[1, 2],\n                                      angles=[0, pi/4, pi/2, 3*pi/4])\n\n    def setup(self):\n        self.image = np.zeros((640, 640))\n        self.image[320:-320, 320:-320] = 1\n    \n        self.image = ndi.rotate(self.image, 15, mode='constant')\n        self.image = ndi.gaussian_filter(self.image, 4)\n        self.image += 0.2 * np.random.random(self.image.shape)\n    \n        self.image_ubyte = util.img_as_ubyte(np.clip(self.image, 0, 1))", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_feature.FeatureSuite.time_glcm", "warmup_time": -1, "sample_time": 0.01}, "benchmark_transform.TransformSuite.time_hough_line": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "37e3f0a951d9d6bc141d6e710082b5267cada23007d9bd610099740493cae348", "code": "class TransformSuite:\n    def time_hough_line(self):\n        result1, result2, result3 = transform.hough_line(self.image)\n\n    def setup(self):\n        self.image = np.zeros((2000, 2000))\n        idx = np.arange(500, 1500)\n        self.image[idx[::-1], idx] = 255\n        self.image[idx, idx] = 255", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_transform.TransformSuite.time_hough_line", "warmup_time": -1, "sample_time": 0.01}, "benchmark_morphology.Watershed.peakmem_reference": {"type": "peakmemory", "timeout": 60.0, "param_names": ["seed_count", "connectivity", "compactness"], "unit": "bytes", "version": "8e7b273baac2ad5c23da20d288ff3604cc384c209e2cad5769abcbaa74fcb708", "code": "class Watershed:\n    def peakmem_reference(self, *args):\n        \"\"\"Provide reference for memory measurement with empty benchmark.\n    \n        Peakmem benchmarks measure the maximum amount of RAM used by a\n        function. However, this maximum also includes the memory used\n        during the setup routine (as of asv 0.2.1; see [1]_).\n        Measuring an empty peakmem function might allow us to disambiguate\n        between the memory used by setup and the memory used by target (see\n        other ``peakmem_`` functions below).\n    \n        References\n        ----------\n        .. [1]: https://asv.readthedocs.io/en/stable/writing_benchmarks.html#peak-memory\n        \"\"\"\n        pass\n\n    def setup(self, *args):\n        self.image = filters.sobel(data.coins())", "name": "benchmark_morphology.Watershed.peakmem_reference", "params": [["5", "500"], ["1", "2"], ["0", "0.01"]]}, "benchmark_exposure.ExposureSuite.time_equalize_hist": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "88c86088c708419353b02a1a1bfe9dea2b65fb1999e49e7df65703a6d3c61a1a", "code": "class ExposureSuite:\n    def time_equalize_hist(self):\n        # Running it 10 times to achieve significant performance time.\n        for i in range(10):\n            result = exposure.equalize_hist(self.image)\n\n    def setup(self):\n        self.image = img_as_float(data.moon())\n        self.image = rescale(self.image, 2.0, anti_aliasing=False)", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_exposure.ExposureSuite.time_equalize_hist", "warmup_time": -1, "sample_time": 0.01}, "benchmark_morphology.Skeletonize3d.time_skeletonize_3d": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "257d54b1b14e4b74814c016acc0f8bf7aa33248c34dc7588e97a3da901e1b5a6", "code": "class Skeletonize3d:\n    def time_skeletonize_3d(self):\n        morphology.skeletonize_3d(self.image)\n\n    def setup(self, *args):\n        # we stack the horse data 5 times to get an example volume\n        self.image = np.stack(5 * [invert(data.horse())])", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_morphology.Skeletonize3d.time_skeletonize_3d", "warmup_time": -1, "sample_time": 0.01}, "benchmark_feature.FeatureSuite.time_canny": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "744eccac4bcb246c82d6827288f5b28832ebe0ef38e3cd5787253135edab99f8", "code": "class FeatureSuite:\n    def time_canny(self):\n        result = feature.canny(self.image)\n\n    def setup(self):\n        self.image = np.zeros((640, 640))\n        self.image[320:-320, 320:-320] = 1\n    \n        self.image = ndi.rotate(self.image, 15, mode='constant')\n        self.image = ndi.gaussian_filter(self.image, 4)\n        self.image += 0.2 * np.random.random(self.image.shape)\n    \n        self.image_ubyte = util.img_as_ubyte(np.clip(self.image, 0, 1))", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_feature.FeatureSuite.time_canny", "warmup_time": -1, "sample_time": 0.01}, "benchmark_morphology.Skeletonize3d.peakmem_skeletonize_3d": {"type": "peakmemory", "timeout": 60.0, "param_names": [], "unit": "bytes", "version": "397e90cea571ad129ed8287600ccb5ee8e7f7c79b7587e00105333c19d329f6c", "code": "class Skeletonize3d:\n    def peakmem_skeletonize_3d(self):\n        morphology.skeletonize_3d(self.image)\n\n    def setup(self, *args):\n        # we stack the horse data 5 times to get an example volume\n        self.image = np.stack(5 * [invert(data.horse())])", "name": "benchmark_morphology.Skeletonize3d.peakmem_skeletonize_3d", "params": []}, "benchmark_morphology.Skeletonize3d.peakmem_reference": {"type": "peakmemory", "timeout": 60.0, "param_names": [], "unit": "bytes", "version": "bf2b7875ce10bdc3f6b1e95b868a6dd43601199410ec34321e114d6c10ba07d6", "code": "class Skeletonize3d:\n    def peakmem_reference(self, *args):\n        \"\"\"Provide reference for memory measurement with empty benchmark.\n    \n        Peakmem benchmarks measure the maximum amount of RAM used by a\n        function. However, this maximum also includes the memory used\n        during the setup routine (as of asv 0.2.1; see [1]_).\n        Measuring an empty peakmem function might allow us to disambiguate\n        between the memory used by setup and the memory used by target (see\n        other ``peakmem_`` functions below).\n    \n        References\n        ----------\n        .. [1]: https://asv.readthedocs.io/en/stable/writing_benchmarks.html#peak-memory\n        \"\"\"\n        pass\n\n    def setup(self, *args):\n        # we stack the horse data 5 times to get an example volume\n        self.image = np.stack(5 * [invert(data.horse())])", "name": "benchmark_morphology.Skeletonize3d.peakmem_reference", "params": []}, "benchmark_segmentation.SegmentationSuite.peakmem_setup": {"type": "peakmemory", "timeout": 60.0, "param_names": [], "unit": "bytes", "version": "fd0e82692754270e51bf028322c7808fa459e7fc0477b47fb1c63e330d48a01e", "code": "class SegmentationSuite:\n    def peakmem_setup(self):\n        \"\"\"peakmem includes the memory used by setup.\n    \n        Peakmem benchmarks measure the maximum amount of RAM used by a\n        function. However, this maximum also includes the memory used\n        by ``setup`` (as of asv 0.2.1; see [1]_)\n    \n        Measuring an empty peakmem function might allow us to disambiguate\n        between the memory used by setup and the memory used by slic (see\n        ``peakmem_slic_basic``, below).\n    \n        References\n        ----------\n        .. [1]: https://asv.readthedocs.io/en/stable/writing_benchmarks.html#peak-memory\n        \"\"\"\n        pass\n\n    def setup(self):\n        self.image = np.random.random((400, 400, 100))\n        self.image[:200, :200, :] += 1\n        self.image[300:, 300:, :] += 0.5", "name": "benchmark_segmentation.SegmentationSuite.peakmem_setup", "params": []}, "benchmark_rank.RankSuite.time_filter": {"type": "time", "repeat": 0, "processes": 2, "param_names": ["filter", "shape"], "unit": "seconds", "number": 0, "version": "601262aef3f9d995c22deb00a26cada340b38ca3bb4b0dad6b54ab59c7269a3b", "code": "class RankSuite:\n    def time_filter(self, filter, shape):\n        getattr(rank, filter)(self.image, self.selem)\n\n    def setup(self, filter, shape):\n        self.image = np.random.randint(0, 255, size=shape, dtype=np.uint8)\n        self.selem = disk(1)", "min_run_count": 2, "params": [["'autolevel'", "'autolevel_percentile'", "'bottomhat'", "'enhance_contrast'", "'enhance_contrast_percentile'", "'entropy'", "'equalize'", "'geometric_mean'", "'gradient'", "'gradient_percentile'", "'majority'", "'maximum'", "'mean'", "'mean_bilateral'", "'mean_percentile'", "'median'", "'minimum'", "'modal'", "'noise_filter'", "'otsu'", "'percentile'", "'pop'", "'pop_bilateral'", "'pop_percentile'", "'subtract_mean'", "'subtract_mean_percentile'", "'sum'", "'sum_bilateral'", "'sum_percentile'", "'threshold'", "'threshold_percentile'", "'tophat'", "'windowed_histogram'"], ["(32, 32)", "(256, 256)"]], "timeout": 60.0, "name": "benchmark_rank.RankSuite.time_filter", "warmup_time": -1, "sample_time": 0.01}, "benchmark_feature.RegisterTranslation.peakmem_register_translation": {"type": "peakmemory", "timeout": 60.0, "param_names": ["ndims", "image_size", "upscale_factor"], "unit": "bytes", "version": "17c65cbd7058a9ac056ea11c0e9f090e2e70b1c6551218ded79823ca61578a73", "code": "class RegisterTranslation:\n    def peakmem_register_translation(self, ndims, image_size, upscale_factor):\n        result = feature.register_translation(self.reference_image,\n                                              self.shifted_image,\n                                              upscale_factor,\n                                              space=\"fourier\")\n\n    def setup(self, ndims, image_size, upscale_factor, *args):\n        shifts = (-2.3, 1.7, 5.4, -3.2)[:ndims]\n        phantom = img_as_float(binary_blobs(length=image_size, n_dim=ndims))\n        self.reference_image = np.fft.fftn(phantom)\n        self.shifted_image = ndi.fourier_shift(self.reference_image, shifts)", "name": "benchmark_feature.RegisterTranslation.peakmem_register_translation", "params": [["2", "3"], ["32", "100"], ["1", "5", "10"]]}, "benchmark_transform_warp.WarpSuite.time_same_type": {"type": "time", "repeat": 0, "processes": 2, "param_names": ["dtype_in", "N", "order"], "unit": "seconds", "number": 0, "version": "58a88559f5f2ba85843eaafc11e68262d79d84c4baf358ccf9b2f8a076dbea73", "code": "class WarpSuite:\n    def time_same_type(self, dtype_in, N, order):\n        \"\"\"Test the case where the users wants to preserve their same low\n        precision data type.\"\"\"\n        result = self.warp(self.image, self.tform, order=self.order,\n                           preserve_range=True)\n    \n        # convert back to input type, no-op if same type\n        result = result.astype(dtype_in, copy=False)\n\n    def setup(self, dtype_in, N, order):\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\", \"Possible precision loss\")\n            self.image = convert(np.random.random((N, N)), dtype=dtype_in)\n        self.tform = SimilarityTransform(scale=1, rotation=np.pi / 10,\n                                         translation=(0, 4))\n        self.tform.params = self.tform.params.astype('float32')\n        self.order = order\n    \n        if 'dtype' in inspect.signature(warp).parameters:\n            self.warp = functools.partial(warp, dtype=self.image.dtype)\n        else:\n            # Keep a call to functools to have the same number of python\n            # function calls\n            self.warp = functools.partial(warp)", "min_run_count": 2, "params": [["<class 'numpy.uint8'>", "<class 'numpy.uint16'>", "<class 'numpy.float32'>", "<class 'numpy.float64'>"], ["128", "1024", "4096"], ["0", "1", "3"]], "timeout": 60.0, "name": "benchmark_transform_warp.WarpSuite.time_same_type", "warmup_time": -1, "sample_time": 0.01}, "benchmark_morphology.Watershed.time_watershed": {"type": "time", "repeat": 0, "processes": 2, "param_names": ["seed_count", "connectivity", "compactness"], "unit": "seconds", "number": 0, "version": "f6d7dc2ae31b2f704ec723e386a9db7ea7d3f0a20643fae88130436cca6012b1", "code": "class Watershed:\n    def time_watershed(self, seed_count, connectivity, compactness):\n        morphology.watershed(self.image, seed_count, connectivity,\n                             compactness=compactness)\n\n    def setup(self, *args):\n        self.image = filters.sobel(data.coins())", "min_run_count": 2, "params": [["5", "500"], ["1", "2"], ["0", "0.01"]], "timeout": 60.0, "name": "benchmark_morphology.Watershed.time_watershed", "warmup_time": -1, "sample_time": 0.01}, "benchmark_transform_warp.WarpSuite.time_to_float64": {"type": "time", "repeat": 0, "processes": 2, "param_names": ["dtype_in", "N", "order"], "unit": "seconds", "number": 0, "version": "78cd3022f14c1517d8e17213b75798a18ae688e28d742e066d0c7af102dfaa45", "code": "class WarpSuite:\n    def time_to_float64(self, dtype_in, N, order):\n        \"\"\"Test the case where want to upvert to float64 for continued\n        transformations.\"\"\"\n        result = warp(self.image, self.tform, order=self.order,\n                      preserve_range=True)\n\n    def setup(self, dtype_in, N, order):\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\", \"Possible precision loss\")\n            self.image = convert(np.random.random((N, N)), dtype=dtype_in)\n        self.tform = SimilarityTransform(scale=1, rotation=np.pi / 10,\n                                         translation=(0, 4))\n        self.tform.params = self.tform.params.astype('float32')\n        self.order = order\n    \n        if 'dtype' in inspect.signature(warp).parameters:\n            self.warp = functools.partial(warp, dtype=self.image.dtype)\n        else:\n            # Keep a call to functools to have the same number of python\n            # function calls\n            self.warp = functools.partial(warp)", "min_run_count": 2, "params": [["<class 'numpy.uint8'>", "<class 'numpy.uint16'>", "<class 'numpy.float32'>", "<class 'numpy.float64'>"], ["128", "1024", "4096"], ["0", "1", "3"]], "timeout": 60.0, "name": "benchmark_transform_warp.WarpSuite.time_to_float64", "warmup_time": -1, "sample_time": 0.01}, "benchmark_segmentation.SegmentationSuite.peakmem_slic_basic": {"type": "peakmemory", "timeout": 60.0, "param_names": [], "unit": "bytes", "version": "c3aea1f2e58c10b537dd05a1fab945d4dae13a9298bc9c006f16afc68f01299b", "code": "class SegmentationSuite:\n    def peakmem_slic_basic(self):\n        segmentation.slic(self.image, enforce_connectivity=False)\n\n    def setup(self):\n        self.image = np.random.random((400, 400, 100))\n        self.image[:200, :200, :] += 1\n        self.image[300:, 300:, :] += 0.5", "name": "benchmark_segmentation.SegmentationSuite.peakmem_slic_basic", "params": []}, "benchmark_filters.FiltersSuite.time_sobel": {"type": "time", "repeat": 0, "processes": 2, "param_names": [], "unit": "seconds", "number": 0, "version": "26d96ae013a05b537fb195615c3733b690d4b4b1a53106de566a2f34593d129b", "code": "class FiltersSuite:\n    def time_sobel(self):\n        result = filters.sobel(self.image)\n\n    def setup(self):\n        self.image = np.random.random((4000, 4000))\n        self.image[:2000, :2000] += 1\n        self.image[3000:, 3000] += 0.5", "min_run_count": 2, "params": [], "timeout": 60.0, "name": "benchmark_filters.FiltersSuite.time_sobel", "warmup_time": -1, "sample_time": 0.01}, "benchmark_morphology.Watershed.peakmem_watershed": {"type": "peakmemory", "timeout": 60.0, "param_names": ["seed_count", "connectivity", "compactness"], "unit": "bytes", "version": "d02700a745016ce0f90ec788a1d64a3fa336a786532b21bb7d91fad239035aa5", "code": "class Watershed:\n    def peakmem_watershed(self, seed_count, connectivity, compactness):\n        morphology.watershed(self.image, seed_count, connectivity,\n                             compactness=compactness)\n\n    def setup(self, *args):\n        self.image = filters.sobel(data.coins())", "name": "benchmark_morphology.Watershed.peakmem_watershed", "params": [["5", "500"], ["1", "2"], ["0", "0.01"]]}}, "machines": {"asv-runner": {"ram": "501692", "machine": "asv-runner", "cpu": "Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz", "arch": "x86_64", "version": 1, "os": "Linux 3.13.0-116-generic"}}, "revision_to_date": {"11264": 1547769001000, "11266": 1547797254000, "10755": 1536749619000, "11270": 1547903753000, "11180": 1545374680000, "11281": 1548207019000, "11283": 1548305322000, "11284": 1548315078000, "4629": 1382191648000, "11287": 1548378974000, "10776": 1536948345000, "5892": 1404162863000, "10778": 1537125918000, "11291": 1548526851000, "11292": 1548549479000, "11293": 1548550653000, "4638": 1382202971000, "4639": 1382203943000, "10784": 1537194338000, "10785": 1537232357000, "11526": 1555882530000, "6183": 1410009377000, "10792": 1537735267000, "10793": 1537771139000, "7210": 1427876798000, "10795": 1537771988000, "47": 1254916339000, "10802": 1537923303000, "9907": 1507919033000, "10807": 1537948357000, "10810": 1537952978000, "10811": 1537953357000, "10453": 1529001347000, "10819": 1538184108000, "10820": 1538185355000, "10821": 1538247522000, "10827": 1538295479000, "10829": 1538307832000, "10830": 1538309587000, "11021": 1541965877000, "1616": 1340599025000, "1621": 1340825559000, "10841": 1538326669000, "10330": 1527557264000, "10845": 1538361581000, "327": 1258019802000, "1009": 1323080638000, "10854": 1538441233000, "10448": 1528886599000, "3176": 1362426369000, "4713": 1382858747000, "10858": 1538479671000, "11538": 1556584753000, "10863": 1538580648000, "10865": 1538627861000, "10866": 1538633599000, "10867": 1538637209000, "9844": 1506469107000, "10869": 1538681262000, "3192": 1362585030000, "10873": 1538720462000, "3195": 1362607955000, "10877": 1538984682000, "1663": 1342561210000, "10883": 1539087561000, "10884": 1539113672000, "10886": 1539116115000, "10894": 1539163784000, "5779": 1401239941000, "10900": 1539187569000, "10902": 1539199451000, "10904": 1539225137000, "10948": 1540469862000, "10909": 1539324823000, "11479": 1553773180000, "10911": 1539476350000, "10916": 1539623703000, "10918": 1539675658000, "10919": 1539735494000, "11019": 1541847384000, "11002": 1541321936000, "10951": 1540499002000, "10924": 1539759435000, "10925": 1539761423000, "10927": 1539770988000, "10928": 1539935177000, "10419": 1528784118000, "10935": 1540198344000, "10936": 1540234554000, "10939": 1540277312000, "11453": 1552065836000, "5311": 1390507678000, "11088": 1543105361000, "10955": 1540635470000, "10436": 1528871304000, "11463": 1552374345000, "11465": 1552502336000, "11466": 1552518088000, "11467": 1552569029000, "10956": 1540662727000, "10958": 1540663257000, "10960": 1540669396000, "10449": 1528913441000, "10962": 1540729479000, "8403": 1457196281000, "10964": 1540730600000, "11214": 1546454942000, "11478": 1553772999000, "11515": 1555361536000, "10968": 1540740737000, "11481": 1554226918000, "10972": 1540848233000, "10461": 1529345348000, "10462": 1529359608000, "11489": 1554244309000, "10466": 1529368401000, "1659": 1342551621000, "8420": 1457383114000, "2789": 1354417987000, "10470": 1529431186000, "10471": 1529433047000, "8424": 1457429471000, "11498": 1554243965000, "11499": 1554244193000, "11500": 1554246575000, "11501": 1554257856000, "11502": 1554301649000, "11504": 1554363772000, "11510": 1555083596000, "11512": 1555090477000, "11513": 1555259951000, "11514": 1555351551000, "11003": 1541343745000, "11516": 1555382859000, "11517": 1555396919000, "1278": 1330318851000, "11477": 1553772799000, "11010": 1541502598000, "11011": 1541502827000, "11012": 1541503598000, "10454": 1529098669000, "2310": 1348967329000, "11531": 1556219815000, "11532": 1556318235000, "11533": 1556326215000, "11022": 1542141244000, "11480": 1553945050000, "10953": 1540623794000, "11539": 1556585004000, "9492": 1490770161000, "11542": 1556708024000, "10969": 1540752132000, "11544": 1556721908000, "801": 1318242527000, "8413": 1457343866000, "11518": 1555526329000, "11060": 1542610039000, "11007": 1541478914000, "10465": 1529368287000, "11080": 1542686011000, "11084": 1542917762000, "336": 1258030125000, "11491": 1554252757000, "11093": 1543201893000, "11095": 1543255897000, "11096": 1543438213000, "11097": 1543522539000, "4954": 1385337664000, "4956": 1385693209000, "11101": 1543784051000, "11102": 1543798074000, "863": 1318450655000, "11105": 1543854951000, "11106": 1543905984000, "11534": 1556417687000, "11196": 1546072439000, "11118": 1544377472000, "10472": 1529452842000, "11122": 1544888120000, "11123": 1545006717000, "11124": 1545091709000, "11126": 1545112094000, "11241": 1547196071000, "11131": 1545136505000, "11132": 1545137273000, "10986": 1541188694000, "11135": 1545143241000, "10941": 1540339800000, "11139": 1545148139000, "10633": 1533950789000, "10635": 1534014641000, "10640": 1534153446000, "10642": 1534173814000, "11156": 1545224182000, "10905": 1539225239000, "11160": 1545231865000, "3652": 1370278592000, "11164": 1545265957000, "11165": 1545269598000, "2464": 1350194912000, "11171": 1545305397000, "10663": 1534684892000, "1451": 1336443423000, "10668": 1534742123000, "11181": 1545420762000, "10772": 1536904365000, "11183": 1545779522000, "11189": 1545863921000, "11190": 1545864429000, "11192": 1545899497000, "10681": 1534929956000, "10684": 1534933357000, "11267": 1547833579000, "10656": 1534406011000, "10691": 1535021866000, "5060": 1385772714000, "11182": 1545691463000, "10698": 1535446271000, "10701": 1535542399000, "10702": 1535544118000, "11215": 1546543165000, "6102": 1409126584000, "9188": 1481564486000, "2526": 1350197097000, "7137": 1425566408000, "7139": 1425466553000, "7140": 1425585619000, "11240": 1547177700000, "1001": 1322951492000, "1517": 1337620468000, "11005": 1541433191000, "10737": 1536209673000, "10738": 1536211353000, "1011": 1323081161000, "10741": 1536299912000, "10743": 1536329769000, "7126": 1425462871000, "10747": 1536510437000, "11260": 1547767315000, "11263": 1547768950000}}